<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="4/7/2024 9:59:06 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DESKTOP-9N71R1N"
  DTS:CreatorName="DESKTOP-9N71R1N\user"
  DTS:DTSID="{D0F20F85-1901-4D49-AB56-2B7BF0C906A9}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5397.1"
  DTS:LocaleID="1038"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="96"
  DTS:VersionGUID="{9CC56987-F79C-44C9-8AC9-B338E2B4C7D0}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[localhost.BI_NHF]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{9E2792BD-5836-4C8B-A238-473EA41A66A2}"
      DTS:ObjectName="localhost.BI_NHF">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=localhost;Initial Catalog=BI_NHF;Integrated Security=True;Application Name=SSIS-Package-{9E2792BD-5836-4C8B-A238-473EA41A66A2}localhost.BI_NHF;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[localhost.BI_NHF1]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{3D4D4EC3-6460-41D5-96C1-1E381C8F74BC}"
      DTS:ObjectName="localhost.BI_NHF1">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=localhost;Initial Catalog=BI_NHF;Provider=SQLNCLI11.1;Integrated Security=SSPI;Application Name=SSIS-Package-{3D4D4EC3-6460-41D5-96C1-1E381C8F74BC}localhost.BI_NHF1;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Merge Disney Shows"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{03293318-AEE2-4938-A703-841851B6FC2C}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Merge Disney Shows"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Merge Disney Shows\Availeable On DISNEY"
              componentClassID="Microsoft.DerivedColumn"
              contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
              name="Availeable On DISNEY"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Merge Disney Shows\Availeable On DISNEY.Inputs[Derived Column Input]"
                  description="Input to the Derived Column Transformation"
                  name="Derived Column Input">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Merge Disney Shows\Availeable On DISNEY.Outputs[Derived Column Output]"
                  description="Default Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  name="Derived Column Output"
                  synchronousInputId="Package\Merge Disney Shows\Availeable On DISNEY.Inputs[Derived Column Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Disney Shows\Availeable On DISNEY.Outputs[Derived Column Output].Columns[AvaileableOn]"
                      dataType="wstr"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      length="100"
                      lineageId="Package\Merge Disney Shows\Availeable On DISNEY.Outputs[Derived Column Output].Columns[AvaileableOn]"
                      name="AvaileableOn"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Derived Column Expression"
                          name="Expression">(DT_WSTR,100)"DISNEY"</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Derived Column Friendly Expression"
                          expressionType="Notify"
                          name="FriendlyExpression">(DT_WSTR,100)"DISNEY"</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Merge Disney Shows\Availeable On DISNEY.Outputs[Derived Column Error Output]"
                  description="Error Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Derived Column Error Output"
                  synchronousInputId="Package\Merge Disney Shows\Availeable On DISNEY.Inputs[Derived Column Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Disney Shows\Availeable On DISNEY.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Merge Disney Shows\Availeable On DISNEY.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Availeable On DISNEY.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Merge Disney Shows\Availeable On DISNEY.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Merge Disney Shows\AvaileableOn changed"
              componentClassID="Microsoft.ConditionalSplit"
              contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
              name="AvaileableOn changed"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Merge Disney Shows\AvaileableOn changed.Inputs[Conditional Split Input]"
                  description="Input to the Conditional Split Transformation"
                  name="Conditional Split Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Merge Disney Shows\AvaileableOn changed.Inputs[Conditional Split Input].Columns[AvaileableOn]"
                      cachedDataType="wstr"
                      cachedLength="100"
                      cachedName="AvaileableOn"
                      lineageId="Package\Merge Disney Shows\Availeable On DISNEY.Outputs[Derived Column Output].Columns[AvaileableOn]" />
                    <inputColumn
                      refId="Package\Merge Disney Shows\AvaileableOn changed.Inputs[Conditional Split Input].Columns[LookupAvaileableOn]"
                      cachedDataType="wstr"
                      cachedLength="100"
                      cachedName="LookupAvaileableOn"
                      lineageId="Package\Merge Disney Shows\Check duplcate movies.Outputs[Lookup Match Output].Columns[LookupAvaileableOn]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Merge Disney Shows\AvaileableOn changed.Outputs[Field Not Changed]"
                  description="Output 1 of the Conditional Split Transformation"
                  errorOrTruncationOperation="Computation"
                  errorRowDisposition="FailComponent"
                  exclusionGroup="1"
                  name="Field Not Changed"
                  synchronousInputId="Package\Merge Disney Shows\AvaileableOn changed.Inputs[Conditional Split Input]"
                  truncationRowDisposition="FailComponent">
                  <properties>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                      name="Expression">#{Package\Merge Disney Shows\Check duplcate movies.Outputs[Lookup Match Output].Columns[LookupAvaileableOn]} == #{Package\Merge Disney Shows\Availeable On DISNEY.Outputs[Derived Column Output].Columns[AvaileableOn]}</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the friendly version of the expression. This expression version uses column names."
                      expressionType="Notify"
                      name="FriendlyExpression">LookupAvaileableOn == AvaileableOn</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                      name="EvaluationOrder">0</property>
                  </properties>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Merge Disney Shows\AvaileableOn changed.Outputs[Changed]"
                  description="Default Output of the Conditional Split Transformation"
                  exclusionGroup="1"
                  name="Changed"
                  synchronousInputId="Package\Merge Disney Shows\AvaileableOn changed.Inputs[Conditional Split Input]">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      name="IsDefaultOut">true</property>
                  </properties>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Merge Disney Shows\AvaileableOn changed.Outputs[Conditional Split Error Output]"
                  description="Error Output of the Conditional Split Transformation"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Conditional Split Error Output"
                  synchronousInputId="Package\Merge Disney Shows\AvaileableOn changed.Inputs[Conditional Split Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Disney Shows\AvaileableOn changed.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Merge Disney Shows\AvaileableOn changed.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\AvaileableOn changed.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Merge Disney Shows\AvaileableOn changed.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Merge Disney Shows\Check duplcate movies"
              componentClassID="Microsoft.Lookup"
              contactInfo="Lookup;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;6"
              description="Joins additional columns to the data flow by looking up values in a table. For example, join to the 'employee id' column the employees table to get 'hire date' and 'employee name'. We recommend this transformation when the lookup table can fit into memory."
              name="Check duplcate movies"
              usesDispositions="true"
              version="6">
              <properties>
                <property
                  dataType="System.String"
                  description="Specifies the SQL statement that generates the lookup table."
                  expressionType="Notify"
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from [dbo].[Shows]</property>
                <property
                  dataType="System.String"
                  description="Specifies a SQL statement that uses parameters to generate the lookup table."
                  expressionType="Notify"
                  name="SqlCommandParam"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from (select * from [dbo].[Shows]) [refTable]
where [refTable].[Type] = ? and [refTable].[Title] = ? and [refTable].[ReleaseYear] = ?</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the type of connection used to access the reference dataset."
                  name="ConnectionType"
                  typeConverter="LookupConnectionType">0</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the cache type of the lookup table."
                  name="CacheType"
                  typeConverter="CacheType">1</property>
                <property
                  dataType="System.Int32"
                  description="Specifies how the Lookup transformation handles rows without matching entries in the reference data set."
                  name="NoMatchBehavior"
                  typeConverter="LookupNoMatchBehavior">1</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the percentage of the cache that is allocated for rows with no matching entries in the reference dataset."
                  name="NoMatchCachePercentage">0</property>
                <property
                  dataType="System.Int32"
                  description="Maximum Memory Usage for Reference Cache on a 32 bit platform."
                  name="MaxMemoryUsage">25</property>
                <property
                  dataType="System.Int64"
                  description="Maximum Memory Usage for Reference Cache on a 64 bit platform."
                  name="MaxMemoryUsage64">25</property>
                <property
                  dataType="System.String"
                  description="Indicates whether to reference metadata in an XML format."
                  name="ReferenceMetadataXml">&lt;referenceMetadata&gt;&lt;referenceColumns&gt;&lt;referenceColumn name="Id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="AvaileableOn" dataType="DT_WSTR" length="100" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="Type" dataType="DT_WSTR" length="10" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="Title" dataType="DT_WSTR" length="200" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="Director" dataType="DT_WSTR" length="500" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="Cast" dataType="DT_WSTR" length="1000" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="Country" dataType="DT_WSTR" length="250" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="ReleaseYear" dataType="DT_I2" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="MovieType" dataType="DT_WSTR" length="500" precision="0" scale="0" codePage="0"/&gt;&lt;/referenceColumns&gt;&lt;/referenceMetadata&gt;</property>
                <property
                  containsID="true"
                  dataType="System.String"
                  description="Specifies the list of lineage identifiers that map to the parameters that the SQL statement in the SQLCommand property uses. Entries in the list are separated by semicolons."
                  name="ParameterMap">#{Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Type]};#{Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Title]};#{Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[ReleaseYear]};</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1250</property>
                <property
                  dataType="System.Boolean"
                  description="Determines whether duplicate keys in the reference data should be treated as errors when full cache mode is used."
                  name="TreatDuplicateKeysAsError">false</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Merge Disney Shows\Check duplcate movies.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[localhost.BI_NHF1]"
                  connectionManagerRefId="Package.ConnectionManagers[localhost.BI_NHF1]"
                  description="Connection manager used to access lookup data."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Merge Disney Shows\Check duplcate movies.Inputs[Lookup Input]"
                  name="Lookup Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Merge Disney Shows\Check duplcate movies.Inputs[Lookup Input].Columns[Type]"
                      cachedDataType="wstr"
                      cachedLength="10"
                      cachedName="Type"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Type]">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Specifies the column in the reference table that a column joins."
                          name="JoinToReferenceColumn">Type</property>
                        <property
                          dataType="System.Null"
                          description="Specifies the column in the reference table from which a column is copied."
                          name="CopyFromReferenceColumn" />
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Merge Disney Shows\Check duplcate movies.Inputs[Lookup Input].Columns[Title]"
                      cachedDataType="wstr"
                      cachedLength="200"
                      cachedName="Title"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Title]">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Specifies the column in the reference table that a column joins."
                          name="JoinToReferenceColumn">Title</property>
                        <property
                          dataType="System.Null"
                          description="Specifies the column in the reference table from which a column is copied."
                          name="CopyFromReferenceColumn" />
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Merge Disney Shows\Check duplcate movies.Inputs[Lookup Input].Columns[ReleaseYear]"
                      cachedDataType="i2"
                      cachedName="ReleaseYear"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[ReleaseYear]">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Specifies the column in the reference table that a column joins."
                          name="JoinToReferenceColumn">ReleaseYear</property>
                        <property
                          dataType="System.Null"
                          description="Specifies the column in the reference table from which a column is copied."
                          name="CopyFromReferenceColumn" />
                      </properties>
                    </inputColumn>
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Merge Disney Shows\Check duplcate movies.Outputs[Lookup Match Output]"
                  errorOrTruncationOperation="Lookup"
                  exclusionGroup="1"
                  name="Lookup Match Output"
                  synchronousInputId="Package\Merge Disney Shows\Check duplcate movies.Inputs[Lookup Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Disney Shows\Check duplcate movies.Outputs[Lookup Match Output].Columns[LookupAvaileableOn]"
                      dataType="wstr"
                      errorOrTruncationOperation="Copy Column"
                      length="100"
                      lineageId="Package\Merge Disney Shows\Check duplcate movies.Outputs[Lookup Match Output].Columns[LookupAvaileableOn]"
                      name="LookupAvaileableOn"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Specifies the column in the reference table from which a column is copied."
                          name="CopyFromReferenceColumn">AvaileableOn</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Merge Disney Shows\Check duplcate movies.Outputs[Lookup Match Output].Columns[LookupId]"
                      dataType="i4"
                      errorOrTruncationOperation="Copy Column"
                      lineageId="Package\Merge Disney Shows\Check duplcate movies.Outputs[Lookup Match Output].Columns[LookupId]"
                      name="LookupId"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Specifies the column in the reference table from which a column is copied."
                          name="CopyFromReferenceColumn">Id</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Merge Disney Shows\Check duplcate movies.Outputs[Lookup No Match Output]"
                  description="The Lookup output that handles rows with no matching entries in the reference dataset. Use this output when the NoMatchBehavior property is set to &quot;Send rows with no matching entries to the no match output.&quot;"
                  exclusionGroup="1"
                  name="Lookup No Match Output"
                  synchronousInputId="Package\Merge Disney Shows\Check duplcate movies.Inputs[Lookup Input]">
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Merge Disney Shows\Check duplcate movies.Outputs[Lookup Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Lookup Error Output"
                  synchronousInputId="Package\Merge Disney Shows\Check duplcate movies.Inputs[Lookup Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Disney Shows\Check duplcate movies.Outputs[Lookup Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Merge Disney Shows\Check duplcate movies.Outputs[Lookup Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Check duplcate movies.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Merge Disney Shows\Check duplcate movies.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Merge Disney Shows\Disney Shows"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Consumes data from SQL Server, OLE DB, ODBC, or Oracle, using the corresponding .NET Framework data provider. Use a Transact-SQL statement to define the result set. For example, extract data from SQL Server with the .NET Framework data provider for SQL Server.;Microsoft Corporation; Microsoft SQL Server; © Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
              description="Consumes data from SQL Server, OLE DB, ODBC, or Oracle, using the corresponding .NET Framework data provider. Use a Transact-SQL statement to define the result set. For example, extract data from SQL Server with the .NET Framework data provider for SQL Server."
              name="Disney Shows"
              usesDispositions="true"
              version="4">
              <properties>
                <property
                  dataType="System.String"
                  description="Specifies the SQL statement used by the component to extract data."
                  expressionType="Notify"
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">30</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether to allow non-string external columns to be implicitly converted to strings at the output columns."
                  name="AllowImplicitStringConversion">true</property>
                <property
                  dataType="System.String"
                  description="The Source database table name."
                  expressionType="Notify"
                  name="TableOrViewName"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">"dbo"."DisneyShows"</property>
                <property
                  dataType="System.Int32"
                  description="Specify the mode to retrieve external column information"
                  name="AccessMode"
                  typeConverter="Microsoft.SqlServer.Dts.Pipeline.DataReaderSourceAdapter+EnumToStringConverter">0</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.DataReaderSourceAdapter</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Merge Disney Shows\Disney Shows.Connections[IDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[localhost.BI_NHF]"
                  connectionManagerRefId="Package.ConnectionManagers[localhost.BI_NHF]"
                  description="Managed connection manager"
                  name="IDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output]"
                  name="ADO NET Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Id]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[Id]"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Id]"
                      name="Id"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Type]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[Type]"
                      length="10"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Type]"
                      name="Type"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Title]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[Title]"
                      length="200"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Title]"
                      name="Title"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Director]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[Director]"
                      length="500"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Director]"
                      name="Director"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Cast]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[Cast]"
                      length="1000"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Cast]"
                      name="Cast"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Country]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[Country]"
                      length="250"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Country]"
                      name="Country"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[DateAdded]"
                      dataType="dbDate"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[DateAdded]"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[DateAdded]"
                      name="DateAdded"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[ReleaseYear]"
                      dataType="i2"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[ReleaseYear]"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[ReleaseYear]"
                      name="ReleaseYear"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Rating]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[Rating]"
                      length="100"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Rating]"
                      name="Rating"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Duration]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[Duration]"
                      length="20"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Duration]"
                      name="Duration"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[MovieType]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[MovieType]"
                      length="500"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[MovieType]"
                      name="MovieType"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Description]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[Description]"
                      length="1500"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Description]"
                      name="Description"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[Id]"
                      dataType="i4"
                      name="Id" />
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[Type]"
                      dataType="wstr"
                      length="10"
                      name="Type" />
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[Title]"
                      dataType="wstr"
                      length="200"
                      name="Title" />
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[Director]"
                      dataType="wstr"
                      length="500"
                      name="Director" />
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[Cast]"
                      dataType="wstr"
                      length="1000"
                      name="Cast" />
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[Country]"
                      dataType="wstr"
                      length="250"
                      name="Country" />
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[DateAdded]"
                      dataType="dbDate"
                      name="DateAdded" />
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[ReleaseYear]"
                      dataType="i2"
                      name="ReleaseYear" />
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[Rating]"
                      dataType="wstr"
                      length="100"
                      name="Rating" />
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[Duration]"
                      dataType="wstr"
                      length="20"
                      name="Duration" />
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[MovieType]"
                      dataType="wstr"
                      length="500"
                      name="MovieType" />
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].ExternalColumns[Description]"
                      dataType="wstr"
                      length="1500"
                      name="Description" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output]"
                  isErrorOut="true"
                  name="ADO NET Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[Id]"
                      dataType="i4"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[Id]"
                      name="Id" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[Type]"
                      dataType="wstr"
                      length="10"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[Type]"
                      name="Type" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[Title]"
                      dataType="wstr"
                      length="200"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[Title]"
                      name="Title" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[Director]"
                      dataType="wstr"
                      length="500"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[Director]"
                      name="Director" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[Cast]"
                      dataType="wstr"
                      length="1000"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[Cast]"
                      name="Cast" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[Country]"
                      dataType="wstr"
                      length="250"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[Country]"
                      name="Country" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[DateAdded]"
                      dataType="dbDate"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[DateAdded]"
                      name="DateAdded" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[ReleaseYear]"
                      dataType="i2"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[ReleaseYear]"
                      name="ReleaseYear" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[Rating]"
                      dataType="wstr"
                      length="100"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[Rating]"
                      name="Rating" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[Duration]"
                      dataType="wstr"
                      length="20"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[Duration]"
                      name="Duration" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[MovieType]"
                      dataType="wstr"
                      length="500"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[MovieType]"
                      name="MovieType" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[Description]"
                      dataType="wstr"
                      length="1500"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[Description]"
                      name="Description" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Merge Disney Shows\Insert to Shows"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Loads data into an ADO.NET-compliant database that uses a database table or view. Load data into a new or existing table. For example, use an ADO.NET provider for ODBC to load data into an ODBC destination.;Microsoft Corporation; Microsoft SQL Server; © Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;2"
              description="Loads data into an ADO.NET-compliant database that uses a database table or view. Load data into a new or existing table. For example, use an ADO.NET provider for ODBC to load data into an ODBC destination."
              name="Insert to Shows"
              usesDispositions="true"
              version="2">
              <properties>
                <property
                  dataType="System.String"
                  description="The Destination database table name."
                  expressionType="Notify"
                  name="TableOrViewName"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">"dbo"."Shows"</property>
                <property
                  dataType="System.Int32"
                  description="Specify the number of rows per batch. The default is 0 which uses the same size as SSIS internal buffer. "
                  expressionType="Notify"
                  name="BatchSize">0</property>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out. A value of 0 indicates infinite time-out. "
                  expressionType="Notify"
                  name="CommandTimeout">30</property>
                <property
                  dataType="System.Boolean"
                  description="Specifies whether to use the SqlBulkCopy interface to improve the performance of bulk insert operations. Only certain providers support this interface."
                  expressionType="Notify"
                  name="UseBulkInsertWhenPossible">true</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ADONETDestination</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Merge Disney Shows\Insert to Shows.Connections[IDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[localhost.BI_NHF]"
                  connectionManagerRefId="Package.ConnectionManagers[localhost.BI_NHF]"
                  description="Managed connection manager"
                  name="IDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input]"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="ADO NET Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].Columns[Type]"
                      cachedDataType="wstr"
                      cachedLength="10"
                      cachedName="Type"
                      externalMetadataColumnId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Type]"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Type]" />
                    <inputColumn
                      refId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].Columns[Title]"
                      cachedDataType="wstr"
                      cachedLength="200"
                      cachedName="Title"
                      externalMetadataColumnId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Title]"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Title]" />
                    <inputColumn
                      refId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].Columns[Director]"
                      cachedDataType="wstr"
                      cachedLength="500"
                      cachedName="Director"
                      externalMetadataColumnId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Director]"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Director]" />
                    <inputColumn
                      refId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].Columns[Cast]"
                      cachedDataType="wstr"
                      cachedLength="1000"
                      cachedName="Cast"
                      externalMetadataColumnId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Cast]"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Cast]" />
                    <inputColumn
                      refId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].Columns[Country]"
                      cachedDataType="wstr"
                      cachedLength="250"
                      cachedName="Country"
                      externalMetadataColumnId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Country]"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[Country]" />
                    <inputColumn
                      refId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].Columns[ReleaseYear]"
                      cachedDataType="i2"
                      cachedName="ReleaseYear"
                      externalMetadataColumnId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[ReleaseYear]"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[ReleaseYear]" />
                    <inputColumn
                      refId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].Columns[AvaileableOn]"
                      cachedDataType="wstr"
                      cachedLength="100"
                      cachedName="AvaileableOn"
                      externalMetadataColumnId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[AvaileableOn]"
                      lineageId="Package\Merge Disney Shows\Availeable On DISNEY.Outputs[Derived Column Output].Columns[AvaileableOn]" />
                    <inputColumn
                      refId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].Columns[CommonMovieType]"
                      cachedDataType="wstr"
                      cachedLength="500"
                      cachedName="CommonMovieType"
                      externalMetadataColumnId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[MovieType]"
                      lineageId="Package\Merge Disney Shows\MovieType to CommonType.Outputs[Output 0].Columns[CommonMovieType]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Id]"
                      dataType="i4"
                      name="Id" />
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[AvaileableOn]"
                      dataType="wstr"
                      length="100"
                      name="AvaileableOn" />
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Type]"
                      dataType="wstr"
                      length="10"
                      name="Type" />
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Title]"
                      dataType="wstr"
                      length="200"
                      name="Title" />
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Director]"
                      dataType="wstr"
                      length="500"
                      name="Director" />
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Cast]"
                      dataType="wstr"
                      length="1000"
                      name="Cast" />
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Country]"
                      dataType="wstr"
                      length="250"
                      name="Country" />
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[ReleaseYear]"
                      dataType="i2"
                      name="ReleaseYear" />
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[MovieType]"
                      dataType="wstr"
                      length="500"
                      name="MovieType" />
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Merge Disney Shows\Insert to Shows.Outputs[ADO NET Destination Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="ADO NET Destination Error Output"
                  synchronousInputId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Disney Shows\Insert to Shows.Outputs[ADO NET Destination Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Merge Disney Shows\Insert to Shows.Outputs[ADO NET Destination Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Insert to Shows.Outputs[ADO NET Destination Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Merge Disney Shows\Insert to Shows.Outputs[ADO NET Destination Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Merge Disney Shows\MovieType to CommonType"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;13"
              description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
              name="MovieType to CommonType"
              version="13">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="30">
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public IDTSConnectionManager100 Connection
    {
        get
        {
            return ParentComponent.ComponentMetaData.RuntimeConnectionCollection.GetRuntimeConnectionByName(@"Connection").ConnectionManager;
        }
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    SqlConnection connection;

    Dictionary<string, List<string>> MovieGenreSynonymPairs = new Dictionary<string, List<string>>();

    public override void AcquireConnections(object Transaction)
    {
        connection = (SqlConnection)this.Connections.Connection.AcquireConnection(Transaction);
    }

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();

        var command = new SqlCommand("SELECT * FROM dbo.MovieGenres;", connection);
        using (var reader = command.ExecuteReader())
        {
            if (reader.HasRows)
            {
                while (reader.Read())
                {
                    var genre = reader.GetString(1);
                    var synonyms = reader.GetString(2);

                    if (genre != "Other")
                    {
                        MovieGenreSynonymPairs.Add(genre, synonyms.Split(',').ToList());
                    }
                }
            }
        }
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        var types = Row.MovieType.Split(',').Select(x => x.Trim()).ToList();
        List<string> commonTypes = new List<string>();
        foreach (var genreSynonym in MovieGenreSynonymPairs)
        {
            if (IsInGenre(types, genreSynonym))
            {
                commonTypes.Add(genreSynonym.Key);
            }
        }

        if (commonTypes.Any())
        {
            Row.CommonMovieType = string.Join(",",commonTypes);
        }
        else
        {
            Row.CommonMovieType = "Other";
        }
    }

    private bool IsInGenre(List<string> types, KeyValuePair<string,List<string>> genreSynonym)
    {
        if (types.Any(t => t.Contains(genreSynonym.Key)))
            return true;

        if (genreSynonym.Value.Any(s => types.Any(t => t.Contains(s))))
            return true;

        return false;
    }
    

    public override void ReleaseConnections()
    {
        this.Connections.Connection.ReleaseConnection(connection);
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String MovieType
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[0]);
        }
    }
    public bool MovieType_IsNull
    {
        get
        {
            return IsNull(0);
        }
    }

    public String CommonMovieType
    {
        set
        {
            this[1] = value;
        }
    }
    public bool CommonMovieType_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_b02f084db28c4e928d933e883517f7e3.Properties.Settings.get_Default():SC_b02f084db28c4e928d933e883517f7e3.Properties.Sett" +
    "ings")]

namespace SC_b02f084db28c4e928d933e883517f7e3.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_b02f084db28c4e928d933e883517f7e3.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{b8062515-2844-4f74-ac5a-2ab0694829d6}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_b02f084db28c4e928d933e883517f7e3</RootNamespace>
    <AssemblyName>SC_B554364DDF1044B1A4FA2C0956F40E09</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptComponent" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptComponent" GeneratedNamespace="SC_b02f084db28c4e928d933e883517f7e3" IconIndex="0"></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_SC160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_b02f084db28c4e928d933e883517f7e3</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_b02f084db28c4e928d933e883517f7e3</msb:DisplayName>
    <msb:ProjectId>{087D811D-B220-4573-999F-75E97A304C1D}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_b02f084db28c4e928d933e883517f7e3.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_b02f084db28c4e928d933e883517f7e3")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_b02f084db28c4e928d933e883517f7e3")]
[assembly: AssemblyCopyright("Copyright @  2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_b02f084db28c4e928d933e883517f7e3.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_b02f084db28c4e928d933e883517f7e3.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_b02f084db28c4e928d933e883517f7e3.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_b02f084db28c4e928d933e883517f7e3.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_b02f084db28c4e928d933e883517f7e3.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="2">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_B554364DDF1044B1A4FA2C0956F40E09.dll]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDALE7KWYAAAAAAAAAAOAAIiALATAAAB4AAAAIAAAAAAAAGj0A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAMg8AABPAAAAAEAAAEgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAIB0AAAAgAAAAHgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAEgEAAAAQAAAAAYAAAAgAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAJgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAD8
PAAAAAAAAEgAAAACAAUAICQAAPAXAAABAAAAAAAAABA8AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAHYCAnsDAAAEbxQAAAYDbxAAAAp0DgAAAX0BAAAEKgAAGzAH
AHoAAAABAAARAigRAAAKcgEAAHACewEAAARzEgAACm8TAAAKCgZvFAAACixJKz8GF28VAAAKCwYY
bxUAAAoMB3I/AABwKBYAAAosIgJ7AgAABAcIF40lAAABJRYfLJ1vFwAACigBAAArbxkAAAoGbxoA
AAotud4KBiwGBm8bAAAK3CoAAAEQAAACABwAU28ACgAAAAAeAigcAAAKKhswBQCyAAAAAgAAEQNv
CQAABheNJQAAASUWHyydbxcAAAp+CwAABCUtFyZ+CgAABP4GHwAABnMdAAAKJYALAAAEKAIAACso
AQAAKwpzHwAACgsCewIAAARvIAAACgwrHxICKCEAAAoNAgYJKAUAAAYsDQcSAygiAAAKbyMAAAoS
AigkAAAKLdjeDhIC/hYEAAAbbxsAAArcBygDAAArLBIDcksAAHAHKCYAAApvCwAABioDcj8AAHBv
CwAABioAAAEQAAACAFIALH4ADgAAAAATMAMAUQAAAAMAABFzIAAABgoGBH0MAAAEBgN9DQAABAZ7
DQAABAb+BiEAAAZzJwAACigEAAArLAIXKgZ8DAAABCgpAAAKBv4GIgAABnMnAAAKKAQAACssAhcq
FipeAnsDAAAEbxQAAAYCewEAAARvKgAACipKAnMrAAAKfQIAAAQCKA8AAAYqKgIDBAUoLAAACipS
AnstAAAKAnsuAAAKFpRvLwAACioiAhYoMAAACiomAhcDKDEAAAoqWgMsCAIXKDIAAAoqck8AAHBz
MwAACnoeAig0AAAKKh4CKDUAAAoqfgIoNgAACgICcxMAAAZ9AwAABAICcxUAAAZ9BAAABCqSBHLs
AABwGm83AAAKLBUCBQIDKDgAAAoOBHMIAAAGbxEAAAYqSisHAgNvEgAABgNvDQAABi3xKgYqOgIo
OQAACgIDfQUAAAQqggJ7BQAABG86AAAKbzsAAApy/AAAcG88AAAKbz0AAAoqOgIoOQAACgIDfQYA
AAQqHgIoOQAACiqufgcAAAQtHnISAQBw0AcAAAIoPgAACm8/AAAKc0AAAAqABwAABH4HAAAEKhp+
CAAABCoeAoAIAAAEKhp+CQAABCoeAihBAAAKKi5zGwAABoAJAAAEKi5zHgAABoAKAAAEKh4Db0IA
AAoqSgMCfAwAAAQoIgAACm9DAAAKKhMwAwAlAAAABAAAEXMjAAAGCgYDfQ4AAAQCew0AAAQG/gYk
AAAGcycAAAooBAAAKyo2AwJ7DgAABG9DAAAKKgBCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAA
AAAFAGwAAABkCAAAI34AANAIAABcCgAAI1N0cmluZ3MAAAAALBMAAIQBAAAjVVMAsBQAABAAAAAj
R1VJRAAAAMAUAAAwAwAAI0Jsb2IAAAAAAAAAAgAAAVcVogkJCwAAAPoBMwAWAAABAAAAMAAAAAsA
AAAOAAAAJAAAABYAAABDAAAAEwAAAAQAAAAEAAAACAAAAAkAAAAGAAAAAQAAAAgAAAABAAAAAwAA
AAQAAAAAAOUEAQAAAAAABgDSA+wHBgBmBOwHBgAeA9kHDwBgCAAABgBLA7kFBgC1A7kFBgCWA7kF
BgBNBLkFBgDyA7kFBgALBLkFBgBiA7kFBgB9A6sECgAmBDACDgAeBmEJBgAcAZEBBgDvAJEBBgA1
CU4FDgD+BmEJPwDBBwAABgANAZEBBgDmAuwHBgAGAU4FCgA2BzACEgAnBzACCgCBBjACCgCVCTAC
FgBWAG0HBgABA9kHBgBHBwwIBgB1BpgFGgDRAs8EGgAyA88EGgCxAoMFDgC1AWEJDgDxBlEGBgDI
BE4FBgDsBk4FHgDQAeAGBgDhAJEBBgDbAU4FBgA3Bk4FBgBkBk4FIgABAJUHIgAaAJUHIgA9AJUH
BgBuAk4FBgDnAU4FBgBACrkFAAAAAFEBAAAAAAEAAQABABAAcwUAABAAAQABAAEAEAAaBwAAXQAD
AAgAAQAQAHcJAABpAAMADwABABAABgkAAEUABQATAAEAEACeCAAARQAGABUAAAAQABMIbwhFAAcA
FgAAARAA0whvCIUACQAaAAMhEACNAQAARQAKAB0AAwEQAJcAAABFAAwAIAADARAAvAAAAEUADgAj
AAEALAa1AQEAEgm5AQYABgnFAQYAngjJAQEAhQnNAQEAhQnNAREAZwXRAREAoQLVAREAwAHZATYA
TQHdARYAbwDhAQYAWgXpAQYAqAj1AQYAMwn8AVAgAAAAAMYA7Ag2AQEAcCAAAAAAxgCEBAYAAgAI
IQAAAADGAI8EBgACABAhAAAAAMYAEwr/AQIA4CEAAAAAgQBzAgUCAwA9IgAAAADGAP8IBgAFAFUi
AAAAAIYYzAcGAAUAaCIAAAAAhhjMBzsBBQBzIgAAAACGCFEClQEIAIgiAAAAAIYIDQUzAAgAkSIA
AAAAhghfAhAACACbIgAAAACGCCIFGAIJALIiAAAAAIYAKgozAAoAuiIAAAAAhgBDCTMACgDCIgAA
AACGGMwHBgAKAOIiAAAAAMYA/QkdAgoAByMAAAAAxgH2Cf8BDgAaIwAAAADGARMK/wEPABwjAAAA
AIYYzAcnAhAAKyMAAAAAhgjrBXkBEQBMIwAAAACGGMwHJwIRAFsjAAAAAIMYzAcGABIAYyMAAAAA
kwhDBy0CEgCPIwAAAACTCIkCMgISAJYjAAAAAJMIlQI3AhIAniMAAAAAlghVCT0CEwClIwAAAACG
GMwHBgATAK0jAAAAAJEY0gdCAhMAuSMAAAAAkRjSB0ICEwBbIwAAAACGGMwHBgATAMUjAAAAAIMA
eABGAhMAWyMAAAAAhhjMBwYAFADNIwAAAACDAKwAmQEUAOAjAAAAAIMA0QCZARUAWyMAAAAAhhjM
BwYAFgARJAAAAACDAPYAmQEWAAAAAQCtBQAAAQAuCgAAAQCoCAAAAgBaBQAAAQA8BwAAAgCuCAAA
AwCPBgAAAQClBAAAAQClBAAAAQBaAQAAAgALAgAAAwA8BwAABACPBgAAAQA8BwAAAQAuCgAAAQCb
CQAAAQCbCQAAAQClBAAAAQAyCgAAAQARCgAAAQAzCQAAAQARCgkAzAcBABEAzAcGABkAzAcKACkA
zAcQADEAzAcQADkAzAcQAEEAzAcQAEkAzAcQAFEAzAcQAFkAzAcQAGEAzAcQAGkAzAcGAKkAzAcG
AOEAzAcGAAEBzAcVANkA+gUbANEAhAQGABEBzAcnABEBDAcuABkBKQkzABkBxQQ3ACEBTQo8ACEB
TwlCADEBzglJAAwAsQFpABkBrAEzAEEByQIGANEAjwQGABQAzAeZADEBPAmfABwAzAcGAAwAvgfE
ACQApQnaACwANArwABwAsQH1ACQACgozADEBSQr7ACEBfgUHATQAzAeZADEBSQoeASwAmwQxAdkA
DAY2AQwAzAcGALkAzAc7AbkAPAdFAbkArghJAcEAxQQ3ALkANgVNAbkARQVSAbkAPQUBAEkBzAcQ
ALkAKgozALkAQwkzANEAzAcGACEB3AhYAdEAwghgAYkAzAcGANEAbgFmAVkBywVsAWEBFQJyAWkB
Vwd5AXEB+QF+AXEBPAqHAekAzAeNAQkBzAcGACEBVQWVASEB4wiZAS4ACwBnAi4AEwBwAi4AGwCP
Ai4AIwCYAi4AKwDBAi4AMwDBAi4AOwDBAi4AQwCYAi4ASwDHAi4AUwDBAi4AWwDeAkMAYwAoA8kA
ewCPAuMAcwAoA+kAewCPAiEBawAoAyMBawAoA0MBawAoA2MBawAoAyAAcQASAZ4BAwABAAUABQAH
AAYACAAIAAAAaQJLAgAALAVPAgAAYwJLAgAAJgVPAgAAIQZTAgAARwdYAgAAqQJdAgAAWQliAgIA
CQADAAIACgAFAAEACwAHAAEADAAJAAIAFAALAAIAFwANAAIAGAAPAAEAGQAPAAIAGgARAF4AkgC+
AM8A5QAXAQSAAAABAAAAAAAAAAAAAAAAACkBAAAEAAAAAAAAAAAAAACjAYQBAAAAABAAAAAAAAAA
AAAAAKwBsQkAAAAABAAAAAAAAAAAAAAAowFiAQAAAAAQAAAAAAAAAAAAAACsAdUJAAAAABAAAAAA
AAAAAAAAAKwBmQYAAAAABAAAAAAAAAAAAAAAowFOBQAAAAAEAAAAAAAAAAAAAACjAX0CAAAAABAA
AAAAAAAAAAAAAKwBvAYAAAAAAAAAAAEAAAAdCAAACQACAAoAAgALAAIAMQBaAD0AuQBLAFoAUQBa
AAAAAAAASURUU0NvbXBvbmVudE1ldGFEYXRhMTAwAElEVFNSdW50aW1lQ29ubmVjdGlvbkNvbGxl
Y3Rpb24xMDAASURUU1J1bnRpbWVDb25uZWN0aW9uMTAwAElEVFNDb25uZWN0aW9uTWFuYWdlcjEw
MAA8PjlfXzVfMAA8SW5wdXQwX1Byb2Nlc3NJbnB1dFJvdz5iX181XzAAPD5jX19EaXNwbGF5Q2xh
c3M2XzAAPElzSW5HZW5yZT5iX18wADw+Y19fRGlzcGxheUNsYXNzNl8xADxJc0luR2VucmU+Yl9f
MQBJRW51bWVyYWJsZWAxAExpc3RgMQA8SXNJbkdlbnJlPmJfXzIARnVuY2AyAEtleVZhbHVlUGFp
cmAyAERpY3Rpb25hcnlgMgBTQ19CNTU0MzY0RERGMTA0NEIxQTRGQTJDMDk1NkY0MEUwOQA8PjkA
PE1vZHVsZT4ASW5wdXRJRABTeXN0ZW0uRGF0YQBnZXRfQ29tcG9uZW50TWV0YURhdGEAbXNjb3Js
aWIAPD5jAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljAFJlYWQAQWRkAFNxbENvbW1hbmQAZGVm
YXVsdEluc3RhbmNlAEVudW1lcmFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0
VHlwZUZyb21IYW5kbGUASW5wdXROYW1lAEdldFJ1bnRpbWVDb25uZWN0aW9uQnlOYW1lAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVsaW5lAGdldF9Nb3ZpZVR5cGUAc2V0X0NvbW1vbk1vdmll
VHlwZQBJc0luR2VucmUAU3lzdGVtLkNvcmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3Vy
Y2VDdWx0dXJlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAERpc3Bvc2UARWRpdG9yQnJvd3NhYmxl
U3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJp
YnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJs
eVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29y
a0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlw
dGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJv
ZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0Q29tcG9u
ZW50RW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNv
bXBhdGliaWxpdHlBdHRyaWJ1dGUAUHJlRXhlY3V0ZQBQb3N0RXhlY3V0ZQBnZXRfVmFsdWUAdmFs
dWUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBHZXRTdHJpbmcAU3lzdGVtLkNvbXBvbmVudE1v
ZGVsAFNDX0I1NTQzNjREREYxMDQ0QjFBNEZBMkMwOTU2RjQwRTA5LmRsbABnZXRfTW92aWVUeXBl
X0lzTnVsbABzZXRfQ29tbW9uTW92aWVUeXBlX0lzTnVsbABTZXROdWxsAHNldF9JdGVtAFN5c3Rl
bQBUcmltAGdlbnJlU3lub255bQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAEpvaW4AU3lzdGVtLkNv
bmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AVHJhbnNhY3Rpb24AU3lzdGVtLlJlZmxl
Y3Rpb24AZ2V0X1J1bnRpbWVDb25uZWN0aW9uQ29sbGVjdGlvbgBnZXRfQ29ubmVjdGlvbgBBY3F1
aXJlQ29ubmVjdGlvbgBSZWxlYXNlQ29ubmVjdGlvbgBTcWxDb25uZWN0aW9uAGNvbm5lY3Rpb24A
SW52YWxpZE9wZXJhdGlvbkV4Y2VwdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AU3RyaW5nQ29tcGFy
aXNvbgBDdWx0dXJlSW5mbwBPdXRwdXROYW1lTWFwAE91dHB1dE1hcABNaWNyb3NvZnQuU3FsU2Vy
dmVyLkRUU1J1bnRpbWVXcmFwAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRFRTUGlwZWxpbmVXcmFwAFN5
c3RlbS5MaW5xAENoYXIARGJEYXRhUmVhZGVyAFNxbERhdGFSZWFkZXIARXhlY3V0ZVJlYWRlcgBJ
bnB1dDBCdWZmZXIAUGlwZWxpbmVCdWZmZXIAU2NyaXB0QnVmZmVyAGdldF9SZXNvdXJjZU1hbmFn
ZXIAZ2V0X0Nvbm5lY3Rpb25NYW5hZ2VyAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUu
V3JhcHBlcgBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZS5XcmFwcGVyAEdldEVudW1l
cmF0b3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21w
aWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU0NfYjAyZjA4NGRiMjhjNGU5MjhkOTMzZTg4
MzUxN2Y3ZTMuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFND
X2IwMmYwODRkYjI4YzRlOTI4ZDkzM2U4ODM1MTdmN2UzLlByb3BlcnRpZXMAVmFyaWFibGVzAHR5
cGVzAEJ1ZmZlckNvbHVtbkluZGV4ZXMAR2V0Q29sdW1uSW5kZXhlcwBTZXR0aW5ncwBFcXVhbHMA
Q29udGFpbnMAQWNxdWlyZUNvbm5lY3Rpb25zAFJlbGVhc2VDb25uZWN0aW9ucwBNb3ZpZUdlbnJl
U3lub255bVBhaXJzAGdldF9IYXNSb3dzAE9iamVjdABTZWxlY3QARW5kT2ZSb3dzZXQAU3BsaXQA
Z2V0X0RlZmF1bHQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AFVzZXJDb21wb25lbnQAUGFyZW50Q29t
cG9uZW50AFNjcmlwdENvbXBvbmVudABnZXRfQ3VycmVudABNaWNyb3NvZnQuU3FsU2VydmVyLlR4
U2NyaXB0AFRvTGlzdABNaWNyb3NvZnQuU3FsU2VydmVyLlBpcGVsaW5lSG9zdABJbnB1dDBfUHJv
Y2Vzc0lucHV0AE1vdmVOZXh0AElucHV0MF9Qcm9jZXNzSW5wdXRSb3cATmV4dFJvdwB4AGdldF9L
ZXkAZ2V0X0Fzc2VtYmx5AEFueQBvcF9JbmVxdWFsaXR5AAAAPVMARQBMAEUAQwBUACAAKgAgAEYA
UgBPAE0AIABkAGIAbwAuAE0AbwB2AGkAZQBHAGUAbgByAGUAcwA7AAALTwB0AGgAZQByAAADLAAA
gJtJAHMATgB1AGwAbAAgAHAAcgBvAHAAZQByAHQAeQAgAGMAYQBuAG4AbwB0ACAAYgBlACAAcwBl
AHQAIAB0AG8AIABGAGEAbABzAGUALgAgAEEAcwBzAGkAZwBuACAAYQAgAHYAYQBsAHUAZQAgAHQA
bwAgAHQAaABlACAAYwBvAGwAdQBtAG4AIABpAG4AcwB0AGUAYQBkAC4AAA9JAG4AcAB1AHQAIAAw
AAAVQwBvAG4AbgBlAGMAdABpAG8AbgAAcVMAQwBfAGIAMAAyAGYAMAA4ADQAZABiADIAOABjADQA
ZQA5ADIAOABkADkAMwAzAGUAOAA4ADMANQAxADcAZgA3AGUAMwAuAFAAcgBvAHAAZQByAHQAaQBl
AHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAVFioSpUsSUmL1lre8ly8tAAEIAEBCAMgAAEFIAEBEREE
IAEBDgUgAQERfQQgARwcBgcDEkkODgYgAgEOEjkEIAASSQMgAAIEIAEOCAUAAgIODgYgAR0OHQMQ
EAEBFRJBAR4AFRKAnQEeAAMKAQ4KFRI9Ag4VEkEBDgcgAgETABMBIAcEFRJBAQ4VEkEBDhURTQIO
FRJBAQ4VEVECDhUSQQEOBhUSWQIODgUgAgEcGBkQAgIVEoCdAR4BFRKAnQEeABUSWQIeAB4BBAoC
Dg4FFRJBAQ4KIAAVEU0CEwATAQoVEU0CDhUSQQEOCiAAFRFRAhMAEwEKFRFRAg4VEkEBDgQgABMA
BSABARMACxABAQIVEoCdAR4ACgACDg4VEoCdAQ4EBwESKAYVElkCDgISEAECAhUSgJ0BHgAVElkC
HgACBCAAEwEEIAEBHAkgAwESYR0IEmUDBhJhAwYdCAQgAQIIBSACAQgcByACAg4RgKkFIAEdCAgF
IAASgK0FIAASgLEGIAESgLUOBCAAEm0IAAESgLkRgL0FIAASgMEHIAIBDhKAwQMgAA4EIAECDgQH
ARIsCLd6XFYZNOCJCImEXc2AgMyRAwYSOQsGFRI9Ag4VEkEBDgMGEhQDBhIYAwYSaQMGEnUDBhJ5
AwYSIAMGEiQHBhUSWQIODgsGFRFRAg4VEkEBDgYGFRJBAQ4CBg4FIAEBEgwSIAICFRJBAQ4VEVEC
DhUSQQEOBCABAQIJIAQBCA4SYRJlBSABARJpBAAAEnUEAAASeQUAAQESeQQAABIgAwAAAQQgAQ4O
AygADgMoAAIEKAASbQQIABJ1BAgAEnkECAASIAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2Vw
dGlvblRocm93cwEIAQACAAAAAAAoAQAjU0NfYjAyZjA4NGRiMjhjNGU5MjhkOTMzZTg4MzUxN2Y3
ZTMAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyNAAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lv
bj12NC43AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjcEAQAAAAAA
ALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3Js
aWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdh
NWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAA
AAAAUEFEUEFEULQAAADwPAAAAAAAAAAAAAAKPQAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/DwA
AAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEA
EAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABY
QAAA7AMAAAAAAAAAAAAA7AM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E
7/4AAAEAAAABAAAAAAAAAAEAAAAAAD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBW
AGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAA
AACwBEwDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAACgDAAABADAAMAAwADAAMAA0
AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4A
YQBtAGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBD
AF8AYgAwADIAZgAwADgANABkAGIAMgA4AGMANABlADkAMgA4AGQAOQAzADMAZQA4ADgAMwA1ADEA
NwBmADcAZQAzAAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADAALgAw
AAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAEMAXwBCADUANQA0ADMANgA0AEQA
RABGADEAMAA0ADQAQgAxAEEANABGAEEAMgBDADAAOQA1ADYARgA0ADAARQAwADkALgBkAGwAbAAA
AEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAA
QAAgACAAMgAwADIANAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAA
AAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAQwBfAEIANQA1ADQA
MwA2ADQARABEAEYAMQAwADQANABCADEAQQA0AEYAQQAyAEMAMAA5ADUANgBGADQAMABFADAAOQAu
AGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAEMAXwBiADAAMgBmADAA
OAA0AGQAYgAyADgAYwA0AGUAOQAyADgAZAA5ADMAMwBlADgAOAAzADUAMQA3AGYANwBlADMAAAA0
AAgAAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAOAAIAAEA
QQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAuADAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAABw9AAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_b554364ddf1044b1a4fa2c0956f40e09</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum140"
                  typeConverter="NOTBROWSABLE">EB</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Merge Disney Shows\MovieType to CommonType.Connections[Connection]"
                  connectionManagerID="Package.ConnectionManagers[localhost.BI_NHF]"
                  connectionManagerRefId="Package.ConnectionManagers[localhost.BI_NHF]"
                  name="Connection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Merge Disney Shows\MovieType to CommonType.Inputs[Input 0]"
                  hasSideEffects="true"
                  name="Input 0">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Merge Disney Shows\MovieType to CommonType.Inputs[Input 0].Columns[MovieType]"
                      cachedDataType="wstr"
                      cachedLength="500"
                      cachedName="MovieType"
                      lineageId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output].Columns[MovieType]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Merge Disney Shows\MovieType to CommonType.Outputs[Output 0]"
                  name="Output 0"
                  synchronousInputId="Package\Merge Disney Shows\MovieType to CommonType.Inputs[Input 0]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Disney Shows\MovieType to CommonType.Outputs[Output 0].Columns[CommonMovieType]"
                      dataType="wstr"
                      length="500"
                      lineageId="Package\Merge Disney Shows\MovieType to CommonType.Outputs[Output 0].Columns[CommonMovieType]"
                      name="CommonMovieType" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Merge Disney Shows\OLE DB Command"
              componentClassID="Microsoft.OLEDBCommand"
              contactInfo="OLE DB Command;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;2"
              description="Runs an SQL statement for each row in a data flow. For example, call a 'new employee setup' stored procedure for each row in the 'new employees' table. Note: running an SQL statement for each row of a large data flow may take a long time."
              name="OLE DB Command"
              usesDispositions="true"
              version="2">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  expressionType="Notify"
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">UPDATE [dbo].[Shows]
   SET [AvaileableOn] = ?
 WHERE Id = ?</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1250</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Merge Disney Shows\OLE DB Command.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[localhost.BI_NHF1]"
                  connectionManagerRefId="Package.ConnectionManagers[localhost.BI_NHF1]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Merge Disney Shows\OLE DB Command.Inputs[OLE DB Command Input]"
                  errorOrTruncationOperation="Command Execution"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Command Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Merge Disney Shows\OLE DB Command.Inputs[OLE DB Command Input].Columns[AvaileableOn]"
                      cachedDataType="wstr"
                      cachedLength="100"
                      cachedName="AvaileableOn"
                      externalMetadataColumnId="Package\Merge Disney Shows\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_0]"
                      lineageId="Package\Merge Disney Shows\Availeable On DISNEY.Outputs[Derived Column Output].Columns[AvaileableOn]" />
                    <inputColumn
                      refId="Package\Merge Disney Shows\OLE DB Command.Inputs[OLE DB Command Input].Columns[LookupId]"
                      cachedDataType="i4"
                      cachedName="LookupId"
                      externalMetadataColumnId="Package\Merge Disney Shows\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_1]"
                      lineageId="Package\Merge Disney Shows\Check duplcate movies.Outputs[Lookup Match Output].Columns[LookupId]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_0]"
                      dataType="wstr"
                      length="100"
                      name="Param_0">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                          name="DBParamInfoFlags">65</property>
                      </properties>
                    </externalMetadataColumn>
                    <externalMetadataColumn
                      refId="Package\Merge Disney Shows\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_1]"
                      dataType="i4"
                      name="Param_1">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                          name="DBParamInfoFlags">81</property>
                      </properties>
                    </externalMetadataColumn>
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Merge Disney Shows\OLE DB Command.Outputs[OLE DB Command Output]"
                  exclusionGroup="1"
                  name="OLE DB Command Output"
                  synchronousInputId="Package\Merge Disney Shows\OLE DB Command.Inputs[OLE DB Command Input]">
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Merge Disney Shows\OLE DB Command.Outputs[OLE DB Command Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Command Error Output"
                  synchronousInputId="Package\Merge Disney Shows\OLE DB Command.Inputs[OLE DB Command Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Disney Shows\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Merge Disney Shows\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Merge Disney Shows\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Merge Disney Shows\Update AvaileableOn"
              componentClassID="Microsoft.DerivedColumn"
              contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
              name="Update AvaileableOn"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Merge Disney Shows\Update AvaileableOn.Inputs[Derived Column Input]"
                  description="Input to the Derived Column Transformation"
                  name="Derived Column Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Merge Disney Shows\Update AvaileableOn.Inputs[Derived Column Input].Columns[AvaileableOn]"
                      cachedDataType="wstr"
                      cachedLength="100"
                      cachedName="AvaileableOn"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Merge Disney Shows\Availeable On DISNEY.Outputs[Derived Column Output].Columns[AvaileableOn]"
                      truncationRowDisposition="FailComponent"
                      usageType="readWrite">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Derived Column Expression"
                          name="Expression">([FINDSTRING](#{Package\Merge Disney Shows\Check duplcate movies.Outputs[Lookup Match Output].Columns[LookupAvaileableOn]},"DISNEY",1) == 0) ? (#{Package\Merge Disney Shows\Check duplcate movies.Outputs[Lookup Match Output].Columns[LookupAvaileableOn]} + ",DISNEY") : (#{Package\Merge Disney Shows\Check duplcate movies.Outputs[Lookup Match Output].Columns[LookupAvaileableOn]})</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Derived Column Friendly Expression"
                          expressionType="Notify"
                          name="FriendlyExpression">(FINDSTRING(LookupAvaileableOn,"DISNEY",1) == 0) ? (LookupAvaileableOn + ",DISNEY") : (LookupAvaileableOn)</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Merge Disney Shows\Update AvaileableOn.Inputs[Derived Column Input].Columns[LookupAvaileableOn]"
                      cachedDataType="wstr"
                      cachedLength="100"
                      cachedName="LookupAvaileableOn"
                      lineageId="Package\Merge Disney Shows\Check duplcate movies.Outputs[Lookup Match Output].Columns[LookupAvaileableOn]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Merge Disney Shows\Update AvaileableOn.Outputs[Derived Column Output]"
                  description="Default Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  name="Derived Column Output"
                  synchronousInputId="Package\Merge Disney Shows\Update AvaileableOn.Inputs[Derived Column Input]">
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Merge Disney Shows\Update AvaileableOn.Outputs[Derived Column Error Output]"
                  description="Error Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Derived Column Error Output"
                  synchronousInputId="Package\Merge Disney Shows\Update AvaileableOn.Inputs[Derived Column Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Disney Shows\Update AvaileableOn.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Merge Disney Shows\Update AvaileableOn.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Merge Disney Shows\Update AvaileableOn.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Merge Disney Shows\Update AvaileableOn.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Merge Disney Shows.Paths[ADO NET Source Output]"
              endId="Package\Merge Disney Shows\Availeable On DISNEY.Inputs[Derived Column Input]"
              name="ADO NET Source Output"
              startId="Package\Merge Disney Shows\Disney Shows.Outputs[ADO NET Source Output]" />
            <path
              refId="Package\Merge Disney Shows.Paths[Derived Column Output]"
              endId="Package\Merge Disney Shows\AvaileableOn changed.Inputs[Conditional Split Input]"
              name="Derived Column Output"
              startId="Package\Merge Disney Shows\Update AvaileableOn.Outputs[Derived Column Output]" />
            <path
              refId="Package\Merge Disney Shows.Paths[Derived Column Output1]"
              endId="Package\Merge Disney Shows\Check duplcate movies.Inputs[Lookup Input]"
              name="Derived Column Output"
              startId="Package\Merge Disney Shows\Availeable On DISNEY.Outputs[Derived Column Output]" />
            <path
              refId="Package\Merge Disney Shows.Paths[Lookup Match Output]"
              endId="Package\Merge Disney Shows\Update AvaileableOn.Inputs[Derived Column Input]"
              name="Lookup Match Output"
              startId="Package\Merge Disney Shows\Check duplcate movies.Outputs[Lookup Match Output]" />
            <path
              refId="Package\Merge Disney Shows.Paths[Lookup No Match Output]"
              endId="Package\Merge Disney Shows\MovieType to CommonType.Inputs[Input 0]"
              name="Lookup No Match Output"
              startId="Package\Merge Disney Shows\Check duplcate movies.Outputs[Lookup No Match Output]" />
            <path
              refId="Package\Merge Disney Shows.Paths[OK]"
              endId="Package\Merge Disney Shows\OLE DB Command.Inputs[OLE DB Command Input]"
              name="OK"
              startId="Package\Merge Disney Shows\AvaileableOn changed.Outputs[Changed]" />
            <path
              refId="Package\Merge Disney Shows.Paths[Output 0]"
              endId="Package\Merge Disney Shows\Insert to Shows.Inputs[ADO NET Destination Input]"
              name="Output 0"
              startId="Package\Merge Disney Shows\MovieType to CommonType.Outputs[Output 0]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Merge Netflix Shows"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{0FA34E2C-3E60-4315-AFB5-50721F8BFCC4}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Merge Netflix Shows"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Merge Netflix Shows\Available on NETFLIX"
              componentClassID="Microsoft.DerivedColumn"
              contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
              name="Available on NETFLIX"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Merge Netflix Shows\Available on NETFLIX.Inputs[Derived Column Input]"
                  description="Input to the Derived Column Transformation"
                  name="Derived Column Input">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Merge Netflix Shows\Available on NETFLIX.Outputs[Derived Column Output]"
                  description="Default Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  name="Derived Column Output"
                  synchronousInputId="Package\Merge Netflix Shows\Available on NETFLIX.Inputs[Derived Column Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Available on NETFLIX.Outputs[Derived Column Output].Columns[AvaileableOn]"
                      dataType="wstr"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      length="100"
                      lineageId="Package\Merge Netflix Shows\Available on NETFLIX.Outputs[Derived Column Output].Columns[AvaileableOn]"
                      name="AvaileableOn"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Derived Column Expression"
                          name="Expression">(DT_WSTR,100)"NETFLIX"</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Derived Column Friendly Expression"
                          expressionType="Notify"
                          name="FriendlyExpression">(DT_WSTR,100)"NETFLIX"</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Merge Netflix Shows\Available on NETFLIX.Outputs[Derived Column Error Output]"
                  description="Error Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Derived Column Error Output"
                  synchronousInputId="Package\Merge Netflix Shows\Available on NETFLIX.Inputs[Derived Column Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Available on NETFLIX.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Merge Netflix Shows\Available on NETFLIX.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Available on NETFLIX.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Merge Netflix Shows\Available on NETFLIX.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Merge Netflix Shows\AvaileableOn changed"
              componentClassID="Microsoft.ConditionalSplit"
              contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
              name="AvaileableOn changed"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Merge Netflix Shows\AvaileableOn changed.Inputs[Conditional Split Input]"
                  description="Input to the Conditional Split Transformation"
                  name="Conditional Split Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Merge Netflix Shows\AvaileableOn changed.Inputs[Conditional Split Input].Columns[AvaileableOn]"
                      cachedDataType="wstr"
                      cachedLength="100"
                      cachedName="AvaileableOn"
                      lineageId="Package\Merge Netflix Shows\Available on NETFLIX.Outputs[Derived Column Output].Columns[AvaileableOn]" />
                    <inputColumn
                      refId="Package\Merge Netflix Shows\AvaileableOn changed.Inputs[Conditional Split Input].Columns[LookupAvaileableOn]"
                      cachedDataType="wstr"
                      cachedLength="100"
                      cachedName="LookupAvaileableOn"
                      lineageId="Package\Merge Netflix Shows\Lookup duplicate movies.Outputs[Lookup Match Output].Columns[LookupAvaileableOn]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Merge Netflix Shows\AvaileableOn changed.Outputs[Field Not Changed]"
                  description="Output 1 of the Conditional Split Transformation"
                  errorOrTruncationOperation="Computation"
                  errorRowDisposition="FailComponent"
                  exclusionGroup="1"
                  name="Field Not Changed"
                  synchronousInputId="Package\Merge Netflix Shows\AvaileableOn changed.Inputs[Conditional Split Input]"
                  truncationRowDisposition="FailComponent">
                  <properties>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                      name="Expression">#{Package\Merge Netflix Shows\Lookup duplicate movies.Outputs[Lookup Match Output].Columns[LookupAvaileableOn]} == #{Package\Merge Netflix Shows\Available on NETFLIX.Outputs[Derived Column Output].Columns[AvaileableOn]}</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the friendly version of the expression. This expression version uses column names."
                      expressionType="Notify"
                      name="FriendlyExpression">LookupAvaileableOn == AvaileableOn</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                      name="EvaluationOrder">0</property>
                  </properties>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Merge Netflix Shows\AvaileableOn changed.Outputs[Changed]"
                  description="Default Output of the Conditional Split Transformation"
                  exclusionGroup="1"
                  name="Changed"
                  synchronousInputId="Package\Merge Netflix Shows\AvaileableOn changed.Inputs[Conditional Split Input]">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      name="IsDefaultOut">true</property>
                  </properties>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Merge Netflix Shows\AvaileableOn changed.Outputs[Conditional Split Error Output]"
                  description="Error Output of the Conditional Split Transformation"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Conditional Split Error Output"
                  synchronousInputId="Package\Merge Netflix Shows\AvaileableOn changed.Inputs[Conditional Split Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Netflix Shows\AvaileableOn changed.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Merge Netflix Shows\AvaileableOn changed.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\AvaileableOn changed.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Merge Netflix Shows\AvaileableOn changed.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Merge Netflix Shows\Edit AvaileableOn"
              componentClassID="Microsoft.DerivedColumn"
              contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
              name="Edit AvaileableOn"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Merge Netflix Shows\Edit AvaileableOn.Inputs[Derived Column Input]"
                  description="Input to the Derived Column Transformation"
                  name="Derived Column Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Merge Netflix Shows\Edit AvaileableOn.Inputs[Derived Column Input].Columns[AvaileableOn]"
                      cachedDataType="wstr"
                      cachedLength="100"
                      cachedName="AvaileableOn"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Merge Netflix Shows\Available on NETFLIX.Outputs[Derived Column Output].Columns[AvaileableOn]"
                      truncationRowDisposition="FailComponent"
                      usageType="readWrite">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Derived Column Expression"
                          name="Expression">([FINDSTRING](#{Package\Merge Netflix Shows\Lookup duplicate movies.Outputs[Lookup Match Output].Columns[LookupAvaileableOn]},"NETFLIX",1) == 0) ? (#{Package\Merge Netflix Shows\Lookup duplicate movies.Outputs[Lookup Match Output].Columns[LookupAvaileableOn]} + ",NETFLIX") : (#{Package\Merge Netflix Shows\Lookup duplicate movies.Outputs[Lookup Match Output].Columns[LookupAvaileableOn]})</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Derived Column Friendly Expression"
                          expressionType="Notify"
                          name="FriendlyExpression">(FINDSTRING(LookupAvaileableOn,"NETFLIX",1) == 0) ? (LookupAvaileableOn + ",NETFLIX") : (LookupAvaileableOn)</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Merge Netflix Shows\Edit AvaileableOn.Inputs[Derived Column Input].Columns[LookupAvaileableOn]"
                      cachedDataType="wstr"
                      cachedLength="100"
                      cachedName="LookupAvaileableOn"
                      lineageId="Package\Merge Netflix Shows\Lookup duplicate movies.Outputs[Lookup Match Output].Columns[LookupAvaileableOn]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Merge Netflix Shows\Edit AvaileableOn.Outputs[Derived Column Output]"
                  description="Default Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  name="Derived Column Output"
                  synchronousInputId="Package\Merge Netflix Shows\Edit AvaileableOn.Inputs[Derived Column Input]">
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Merge Netflix Shows\Edit AvaileableOn.Outputs[Derived Column Error Output]"
                  description="Error Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Derived Column Error Output"
                  synchronousInputId="Package\Merge Netflix Shows\Edit AvaileableOn.Inputs[Derived Column Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Edit AvaileableOn.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Merge Netflix Shows\Edit AvaileableOn.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Edit AvaileableOn.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Merge Netflix Shows\Edit AvaileableOn.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Merge Netflix Shows\Insert to Shows"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Loads data into an ADO.NET-compliant database that uses a database table or view. Load data into a new or existing table. For example, use an ADO.NET provider for ODBC to load data into an ODBC destination.;Microsoft Corporation; Microsoft SQL Server; © Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;2"
              description="Loads data into an ADO.NET-compliant database that uses a database table or view. Load data into a new or existing table. For example, use an ADO.NET provider for ODBC to load data into an ODBC destination."
              name="Insert to Shows"
              usesDispositions="true"
              version="2">
              <properties>
                <property
                  dataType="System.String"
                  description="The Destination database table name."
                  expressionType="Notify"
                  name="TableOrViewName"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">"dbo"."Shows"</property>
                <property
                  dataType="System.Int32"
                  description="Specify the number of rows per batch. The default is 0 which uses the same size as SSIS internal buffer. "
                  expressionType="Notify"
                  name="BatchSize">0</property>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out. A value of 0 indicates infinite time-out. "
                  expressionType="Notify"
                  name="CommandTimeout">30</property>
                <property
                  dataType="System.Boolean"
                  description="Specifies whether to use the SqlBulkCopy interface to improve the performance of bulk insert operations. Only certain providers support this interface."
                  expressionType="Notify"
                  name="UseBulkInsertWhenPossible">true</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ADONETDestination</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Merge Netflix Shows\Insert to Shows.Connections[IDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[localhost.BI_NHF]"
                  connectionManagerRefId="Package.ConnectionManagers[localhost.BI_NHF]"
                  description="Managed connection manager"
                  name="IDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input]"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="ADO NET Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].Columns[Type]"
                      cachedDataType="wstr"
                      cachedLength="10"
                      cachedName="Type"
                      externalMetadataColumnId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Type]"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Type]" />
                    <inputColumn
                      refId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].Columns[Title]"
                      cachedDataType="wstr"
                      cachedLength="200"
                      cachedName="Title"
                      externalMetadataColumnId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Title]"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Title]" />
                    <inputColumn
                      refId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].Columns[Director]"
                      cachedDataType="wstr"
                      cachedLength="500"
                      cachedName="Director"
                      externalMetadataColumnId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Director]"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Director]" />
                    <inputColumn
                      refId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].Columns[Cast]"
                      cachedDataType="wstr"
                      cachedLength="1000"
                      cachedName="Cast"
                      externalMetadataColumnId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Cast]"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Cast]" />
                    <inputColumn
                      refId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].Columns[Country]"
                      cachedDataType="wstr"
                      cachedLength="250"
                      cachedName="Country"
                      externalMetadataColumnId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Country]"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Country]" />
                    <inputColumn
                      refId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].Columns[ReleaseYear]"
                      cachedDataType="i2"
                      cachedName="ReleaseYear"
                      externalMetadataColumnId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[ReleaseYear]"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[ReleaseYear]" />
                    <inputColumn
                      refId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].Columns[AvaileableOn]"
                      cachedDataType="wstr"
                      cachedLength="100"
                      cachedName="AvaileableOn"
                      externalMetadataColumnId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[AvaileableOn]"
                      lineageId="Package\Merge Netflix Shows\Available on NETFLIX.Outputs[Derived Column Output].Columns[AvaileableOn]" />
                    <inputColumn
                      refId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].Columns[CommonMovieType]"
                      cachedDataType="wstr"
                      cachedLength="500"
                      cachedName="CommonMovieType"
                      externalMetadataColumnId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[MovieType]"
                      lineageId="Package\Merge Netflix Shows\MovieType to CommonType.Outputs[Output 0].Columns[CommonMovieType]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Id]"
                      dataType="i4"
                      name="Id" />
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[AvaileableOn]"
                      dataType="wstr"
                      length="100"
                      name="AvaileableOn" />
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Type]"
                      dataType="wstr"
                      length="10"
                      name="Type" />
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Title]"
                      dataType="wstr"
                      length="200"
                      name="Title" />
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Director]"
                      dataType="wstr"
                      length="500"
                      name="Director" />
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Cast]"
                      dataType="wstr"
                      length="1000"
                      name="Cast" />
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[Country]"
                      dataType="wstr"
                      length="250"
                      name="Country" />
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[ReleaseYear]"
                      dataType="i2"
                      name="ReleaseYear" />
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input].ExternalColumns[MovieType]"
                      dataType="wstr"
                      length="500"
                      name="MovieType" />
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Merge Netflix Shows\Insert to Shows.Outputs[ADO NET Destination Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="ADO NET Destination Error Output"
                  synchronousInputId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Insert to Shows.Outputs[ADO NET Destination Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Merge Netflix Shows\Insert to Shows.Outputs[ADO NET Destination Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Insert to Shows.Outputs[ADO NET Destination Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Merge Netflix Shows\Insert to Shows.Outputs[ADO NET Destination Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Merge Netflix Shows\Lookup duplicate movies"
              componentClassID="Microsoft.Lookup"
              contactInfo="Lookup;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;6"
              description="Joins additional columns to the data flow by looking up values in a table. For example, join to the 'employee id' column the employees table to get 'hire date' and 'employee name'. We recommend this transformation when the lookup table can fit into memory."
              name="Lookup duplicate movies"
              usesDispositions="true"
              version="6">
              <properties>
                <property
                  dataType="System.String"
                  description="Specifies the SQL statement that generates the lookup table."
                  expressionType="Notify"
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from [dbo].[Shows]</property>
                <property
                  dataType="System.String"
                  description="Specifies a SQL statement that uses parameters to generate the lookup table."
                  expressionType="Notify"
                  name="SqlCommandParam"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from (select * from [dbo].[Shows]) [refTable]
where [refTable].[Type] = ? and [refTable].[Title] = ? and [refTable].[ReleaseYear] = ?</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the type of connection used to access the reference dataset."
                  name="ConnectionType"
                  typeConverter="LookupConnectionType">0</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the cache type of the lookup table."
                  name="CacheType"
                  typeConverter="CacheType">1</property>
                <property
                  dataType="System.Int32"
                  description="Specifies how the Lookup transformation handles rows without matching entries in the reference data set."
                  name="NoMatchBehavior"
                  typeConverter="LookupNoMatchBehavior">1</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the percentage of the cache that is allocated for rows with no matching entries in the reference dataset."
                  name="NoMatchCachePercentage">0</property>
                <property
                  dataType="System.Int32"
                  description="Maximum Memory Usage for Reference Cache on a 32 bit platform."
                  name="MaxMemoryUsage">25</property>
                <property
                  dataType="System.Int64"
                  description="Maximum Memory Usage for Reference Cache on a 64 bit platform."
                  name="MaxMemoryUsage64">25</property>
                <property
                  dataType="System.String"
                  description="Indicates whether to reference metadata in an XML format."
                  name="ReferenceMetadataXml">&lt;referenceMetadata&gt;&lt;referenceColumns&gt;&lt;referenceColumn name="Id" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="AvaileableOn" dataType="DT_WSTR" length="100" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="Type" dataType="DT_WSTR" length="10" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="Title" dataType="DT_WSTR" length="200" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="Director" dataType="DT_WSTR" length="500" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="Cast" dataType="DT_WSTR" length="1000" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="Country" dataType="DT_WSTR" length="250" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="ReleaseYear" dataType="DT_I2" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="MovieType" dataType="DT_WSTR" length="500" precision="0" scale="0" codePage="0"/&gt;&lt;/referenceColumns&gt;&lt;/referenceMetadata&gt;</property>
                <property
                  containsID="true"
                  dataType="System.String"
                  description="Specifies the list of lineage identifiers that map to the parameters that the SQL statement in the SQLCommand property uses. Entries in the list are separated by semicolons."
                  name="ParameterMap">#{Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Type]};#{Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Title]};#{Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[ReleaseYear]};</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1250</property>
                <property
                  dataType="System.Boolean"
                  description="Determines whether duplicate keys in the reference data should be treated as errors when full cache mode is used."
                  name="TreatDuplicateKeysAsError">false</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Merge Netflix Shows\Lookup duplicate movies.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[localhost.BI_NHF1]"
                  connectionManagerRefId="Package.ConnectionManagers[localhost.BI_NHF1]"
                  description="Connection manager used to access lookup data."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Merge Netflix Shows\Lookup duplicate movies.Inputs[Lookup Input]"
                  name="Lookup Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Merge Netflix Shows\Lookup duplicate movies.Inputs[Lookup Input].Columns[Type]"
                      cachedDataType="wstr"
                      cachedLength="10"
                      cachedName="Type"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Type]">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Specifies the column in the reference table that a column joins."
                          name="JoinToReferenceColumn">Type</property>
                        <property
                          dataType="System.Null"
                          description="Specifies the column in the reference table from which a column is copied."
                          name="CopyFromReferenceColumn" />
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Merge Netflix Shows\Lookup duplicate movies.Inputs[Lookup Input].Columns[Title]"
                      cachedDataType="wstr"
                      cachedLength="200"
                      cachedName="Title"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Title]">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Specifies the column in the reference table that a column joins."
                          name="JoinToReferenceColumn">Title</property>
                        <property
                          dataType="System.Null"
                          description="Specifies the column in the reference table from which a column is copied."
                          name="CopyFromReferenceColumn" />
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Merge Netflix Shows\Lookup duplicate movies.Inputs[Lookup Input].Columns[ReleaseYear]"
                      cachedDataType="i2"
                      cachedName="ReleaseYear"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[ReleaseYear]">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Specifies the column in the reference table that a column joins."
                          name="JoinToReferenceColumn">ReleaseYear</property>
                        <property
                          dataType="System.Null"
                          description="Specifies the column in the reference table from which a column is copied."
                          name="CopyFromReferenceColumn" />
                      </properties>
                    </inputColumn>
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Merge Netflix Shows\Lookup duplicate movies.Outputs[Lookup Match Output]"
                  errorOrTruncationOperation="Lookup"
                  exclusionGroup="1"
                  name="Lookup Match Output"
                  synchronousInputId="Package\Merge Netflix Shows\Lookup duplicate movies.Inputs[Lookup Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Lookup duplicate movies.Outputs[Lookup Match Output].Columns[LookupAvaileableOn]"
                      dataType="wstr"
                      errorOrTruncationOperation="Copy Column"
                      length="100"
                      lineageId="Package\Merge Netflix Shows\Lookup duplicate movies.Outputs[Lookup Match Output].Columns[LookupAvaileableOn]"
                      name="LookupAvaileableOn"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Specifies the column in the reference table from which a column is copied."
                          name="CopyFromReferenceColumn">AvaileableOn</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Lookup duplicate movies.Outputs[Lookup Match Output].Columns[LookupId]"
                      dataType="i4"
                      errorOrTruncationOperation="Copy Column"
                      lineageId="Package\Merge Netflix Shows\Lookup duplicate movies.Outputs[Lookup Match Output].Columns[LookupId]"
                      name="LookupId"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          dataType="System.String"
                          description="Specifies the column in the reference table from which a column is copied."
                          name="CopyFromReferenceColumn">Id</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Merge Netflix Shows\Lookup duplicate movies.Outputs[Lookup No Match Output]"
                  description="The Lookup output that handles rows with no matching entries in the reference dataset. Use this output when the NoMatchBehavior property is set to &quot;Send rows with no matching entries to the no match output.&quot;"
                  exclusionGroup="1"
                  name="Lookup No Match Output"
                  synchronousInputId="Package\Merge Netflix Shows\Lookup duplicate movies.Inputs[Lookup Input]">
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Merge Netflix Shows\Lookup duplicate movies.Outputs[Lookup Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Lookup Error Output"
                  synchronousInputId="Package\Merge Netflix Shows\Lookup duplicate movies.Inputs[Lookup Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Lookup duplicate movies.Outputs[Lookup Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Merge Netflix Shows\Lookup duplicate movies.Outputs[Lookup Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Lookup duplicate movies.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Merge Netflix Shows\Lookup duplicate movies.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Merge Netflix Shows\MovieType to CommonType"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;13"
              description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
              name="MovieType to CommonType"
              version="13">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="30">
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public IDTSConnectionManager100 Connection
    {
        get
        {
            return ParentComponent.ComponentMetaData.RuntimeConnectionCollection.GetRuntimeConnectionByName(@"Connection").ConnectionManager;
        }
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    SqlConnection connection;

    Dictionary<string, List<string>> MovieGenreSynonymPairs = new Dictionary<string, List<string>>();

    public override void AcquireConnections(object Transaction)
    {
        connection = (SqlConnection)this.Connections.Connection.AcquireConnection(Transaction);
    }

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override async void PreExecute()
    {
        base.PreExecute();

        var command = new SqlCommand("SELECT * FROM dbo.MovieGenres;", connection);
        using (var reader = command.ExecuteReader())
        {
            if (reader.HasRows)
            {
                while (reader.Read())
                {
                    var genre = reader.GetString(1);
                    var synonyms = reader.GetString(2);

                    if (genre != "Other")
                    {
                        MovieGenreSynonymPairs.Add(genre, synonyms.Split(',').ToList());
                    }
                }
            }
        }
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        var types = Row.MovieType.Split(',').Select(x => x.Trim()).ToList();
        List<string> commonTypes = new List<string>();
        foreach (var genreSynonym in MovieGenreSynonymPairs)
        {
            if (IsInGenre(types, genreSynonym))
            {
                commonTypes.Add(genreSynonym.Key);
            }
        }

        if (commonTypes.Any())
        {
            Row.CommonMovieType = string.Join(",",commonTypes);
        }
        else
        {
            Row.CommonMovieType = "Other";
        }
    }

    private bool IsInGenre(List<string> types, KeyValuePair<string,List<string>> genreSynonym)
    {
        if (types.Any(t => t.Contains(genreSynonym.Key)))
            return true;

        if (genreSynonym.Value.Any(s => types.Any(t => t.Contains(s))))
            return true;

        return false;
    }
    

    public override void ReleaseConnections()
    {
        this.Connections.Connection.ReleaseConnection(connection);
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String MovieType
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[0]);
        }
    }
    public bool MovieType_IsNull
    {
        get
        {
            return IsNull(0);
        }
    }

    public String CommonMovieType
    {
        set
        {
            this[1] = value;
        }
    }
    public bool CommonMovieType_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_b02f084db28c4e928d933e883517f7e3.Properties.Settings.get_Default():SC_b02f084db28c4e928d933e883517f7e3.Properties.Sett" +
    "ings")]

namespace SC_b02f084db28c4e928d933e883517f7e3.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_b02f084db28c4e928d933e883517f7e3.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{b8062515-2844-4f74-ac5a-2ab0694829d6}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_b02f084db28c4e928d933e883517f7e3</RootNamespace>
    <AssemblyName>SC_b02f084db28c4e928d933e883517f7e3</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptComponent" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptComponent" GeneratedNamespace="SC_b02f084db28c4e928d933e883517f7e3" IconIndex="0"></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_SC160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>SC_b02f084db28c4e928d933e883517f7e3</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>SC_b02f084db28c4e928d933e883517f7e3</msb:DisplayName>
    <msb:ProjectId>{3B4149DD-9F6E-41C2-8020-89DF081D40D3}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="SC_b02f084db28c4e928d933e883517f7e3.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="main.cs" />
    <msb:File Include="BufferWrapper.cs" />
    <msb:File Include="ComponentWrapper.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_b02f084db28c4e928d933e883517f7e3")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_b02f084db28c4e928d933e883517f7e3")]
[assembly: AssemblyCopyright("Copyright @  2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_b02f084db28c4e928d933e883517f7e3.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_b02f084db28c4e928d933e883517f7e3.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_b02f084db28c4e928d933e883517f7e3.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_b02f084db28c4e928d933e883517f7e3.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_b02f084db28c4e928d933e883517f7e3.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="2">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_b02f084db28c4e928d933e883517f7e3.dll]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAJA7KWYAAAAAAAAAAOAAIiALATAAACAAAAAIAAAAAAAA5j8A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAJQ/AABPAAAAAEAAAEgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA7B8AAAAgAAAAIAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAEgEAAAAQAAAAAYAAAAiAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAKAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADI
PwAAAAAAAEgAAAACAAUAvCQAACAaAAABAAAAAAAAANw+AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAHYCAnsDAAAEbxUAAAYDbxQAAAp0DgAAAX0BAAAEKgAAEzAC
ACsAAAABAAAREgAoFQAACn0QAAAEEgACfREAAAQSABV9DwAABBIAfBAAAAQSACgBAAArKh4CKBcA
AAoqABswBQCyAAAAAgAAEQNvCgAABheNKQAAASUWHyydbxgAAAp+CwAABCUtFyZ+CgAABP4GIAAA
BnMZAAAKJYALAAAEKAIAACsoAwAAKwpzHAAACgsCewIAAARvHQAACgwrHxICKB4AAAoNAgYJKAUA
AAYsDQcSAygfAAAKbyAAAAoSAighAAAKLdjeDhIC/hYEAAAbbyIAAArcBygEAAArLBIDcgEAAHAH
KCQAAApvDAAABioDcgUAAHBvDAAABioAAAEQAAACAFIALH4ADgAAAAATMAMAUQAAAAMAABFzIQAA
BgoGBH0MAAAEBgN9DQAABAZ7DQAABAb+BiIAAAZzJQAACigFAAArLAIXKgZ8DAAABCgnAAAKBv4G
IwAABnMlAAAKKAUAACssAhcqFipeAnsDAAAEbxUAAAYCewEAAARvKAAACipKAnMpAAAKfQIAAAQC
KBAAAAYqHgIoKgAACioqAgMEBSgrAAAKKlICeywAAAoCey0AAAoWlG8uAAAKKiICFigvAAAKKiYC
FwMoMAAACipaAywIAhcoMQAACipyEQAAcHMyAAAKeh4CKDMAAAoqHgIoNAAACip+Aig1AAAKAgJz
FAAABn0DAAAEAgJzFgAABn0EAAAEKpIEcq4AAHAabzYAAAosFQIFAgMoNwAACg4EcwkAAAZvEgAA
BipKKwcCA28TAAAGA28OAAAGLfEqBio6Aig4AAAKAgN9BQAABCqCAnsFAAAEbzkAAApvOgAACnK+
AABwbzsAAApvPAAACio6Aig4AAAKAgN9BgAABCoeAig4AAAKKq5+BwAABC0ectQAAHDQBwAAAig9
AAAKbz4AAApzPwAACoAHAAAEfgcAAAQqGn4IAAAEKh4CgAgAAAQqGn4JAAAEKh4CKEAAAAoqLnMc
AAAGgAkAAAQqLnMfAAAGgAoAAAQqHgNvQQAACipKAwJ8DAAABCgfAAAKb0IAAAoqEzADACUAAAAE
AAARcyQAAAYKBgN9DgAABAJ7DQAABAb+BiUAAAZzJQAACigFAAArKjYDAnsOAAAEb0IAAAoqABsw
BwC8AAAABQAAEQJ7DwAABAoCexEAAAQLBygIAAAGckYBAHAHewEAAARzQwAACm9EAAAKDAhvRQAA
CixLK0EIF29GAAAKDQgYb0YAAAoTBAlyBQAAcChHAAAKLCMHewIAAAQJEQQXjSkAAAElFh8snW8Y
AAAKKAMAACtvSAAACghvSQAACi233g4GFi8JCCwGCG8iAAAK3N4ZEwUCH/59DwAABAJ8EAAABBEF
KEoAAAreEwIf/n0PAAAEAnwQAAAEKEsAAAoqARwAAAIAKgBVfwAOAAAAAAAADgCBjwAZHAAAATYC
fBAAAAQDKEwAAAoqAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAABMCQAAI34A
ALgJAABACwAAI1N0cmluZ3MAAAAA+BQAAIQBAAAjVVMAfBYAABAAAAAjR1VJRAAAAIwWAACUAwAA
I0Jsb2IAAAAAAAAAAgAAAVcXogsJCwAAAPoBMwAWAAABAAAANgAAAAwAAAARAAAAJwAAABcAAAAB
AAAATAAAABgAAAAFAAAABAAAAAgAAAAJAAAAAgAAAAYAAAABAAAACAAAAAEAAAAEAAAABQAAAAAA
fAUBAAAAAAAGAGkEtAgGAP0EtAgGAIIDoQgPACgJAAAGAK8DUAYGAEwEUAYGAC0EUAYGAOQEUAYG
AIkEUAYGAKIEUAYGAOEDUAYGAPwDQgUKAL0EeAIOALUGPQoGACMBqQEGAPYAqQEGAAcK5QUGAMAC
5QUGAMYDtAg/AIkIAAAGABQBqQEGAEoDtAgGABUEoQgGAA0B5QUGALsC5QUGAEgCtAgOAKIHPQoG
AOsG5QUGAL4HtAgKAP4HeAISAO8HeAIKACUHeAIKAHEKeAIWAFYANQgGAGUDoQgGAA8I1AgGABkH
LwYaACoDZgUaAJYDZgUaAAMDGgYGAJAH5QUGAF8F5QUeAOgBhAcGAOgAqQEGAPMB5QUGAM4G5QUG
AAgH5QUiAAEAXQgiABoAXQgiAD0AXQgGAP8B5QUGACILUAYOAM0BPQoOAJUH9QYAAAAAaQEAAAAA
AQABAAEAEAAKBgAAEAABAAEAAQAQAOIHAAB5AAMACQABABAAUwoAAIUAAwAQAAEAEADYCQAARQAF
ABQAAQAQAGYJAABFAAYAFgAAABAA2wg3CUUABwAXAAABEACbCTcJoQAJABsAAyEQAKUBAABFAAoA
HgADARAAlwAAAEUADAAhAAMBEADDAAAARQAOACQAAwEQADABAABlAA8AJgABAMMG5QEBAOQJ6QEG
ANgJ9QEGAGYJ+QEBAGEK/QEBAGEK/QERAP4FAgIRAPMCBwIRANgBDAI2AGUBEAIWAG8AFAIGAPEF
HAIGAHAJKAIGAAUKLwIGAD8DMgIGANUHNQIGAKQJOQJQIAAAAADGAL4JNAEBAHAgAAAAAMYAGwUG
AAIApyAAAAAAxgAmBQYAAgCwIAAAAADGAPUKPQICAIAhAAAAAIEAxQJDAgMA3SEAAAAAxgDRCQYA
BQD1IQAAAACGGJQIBgAFAAgiAAAAAIEAvAAGAAUAECIAAAAAhhiUCDkBBQAbIgAAAACGCJkCmQEI
ADAiAAAAAIYIpAX1AAgAOSIAAAAAhginAhAACABDIgAAAACGCLkFVgIJAFoiAAAAAIYADAv1AAoA
YiIAAAAAhgAVCvUACgBqIgAAAACGGJQIBgAKAIoiAAAAAMYA3wpbAgoAryIAAAAAxgHYCj0CDgDC
IgAAAADGAfUKPQIPAMQiAAAAAIYYlAhmAhAA0yIAAAAAhgiCBn0BEQD0IgAAAACGGJQIZgIRAAMj
AAAAAIMYlAgGABIACyMAAAAAkwgLCG0CEgA3IwAAAACTCNsCcwISAD4jAAAAAJMI5wJ5AhIARiMA
AAAAlggnCoACEwBNIwAAAACGGJQIBgATAFUjAAAAAJEYmgiFAhMAYSMAAAAAkRiaCIUCEwADIwAA
AACGGJQIBgATAG0jAAAAAIMAeACJAhMAAyMAAAAAhhiUCAYAFAB1IwAAAACDAKwAnQEUAIgjAAAA
AIMA2ACdARUAAyMAAAAAhhiUCAYAFgC5IwAAAACDAP0AnQEWAMgjAAAAAOEB7AoGABcArCQAAAAA
4QFbAhsAFwAAAAEARAYAAAEAEAsAAAEAcAkAAAIA8QUAAAEABAgAAAIAdgkAAAMAMwcAAAEAPAUA
AAEAPAUAAAEAcgEAAAIAIwIAAAMABAgAAAQAMwcAAAEABAgAAAEAEAsAAAEAdwoAAAEAdwoAAAEA
PAUAAAEAFAsAAAEA8woAAAEABQoAAAEA8woAAAEAawIMAGkACQCUCAEAEQCUCAYAGQCUCAoAKQCU
CBAAMQCUCBAAOQCUCBAAQQCUCBAASQCUCBAAUQCUCBAAWQCUCBAAYQCUCBAAaQCUCAYAmQCUCBUA
sQCUCAYAuQCUCAYA0QDsCgYA0QBbAhsAGQGUCAYAOQGUCCEAEQGRBigA6QAjAzIA6QCqCjcACQEm
BQYAUQEhCmUADACUCHMAWQEOCnkAWQGwCpgAFACUCAYAHACGCL4AJACBCtQALAAWC+oAFADJAe8A
JADsCvUAaQEbAwYAWQErC/kAUQEVBgUBNACUCHMAWQErCxwBLAAyBS8BEQGjBjQBHACUCAYACQEb
BQYA8QCUCDkB8QAECEQB8QB2CUgB+QBcBUwB8QDNBVEB8QDcBVYB8QDUBQEAcQGUCBAA8QAMC/UA
8QAVCvUACQGUCAYAUQGuCVwBCQGKCWQBiQCUCAYACQGGAWoBgQFiBnABiQEtAnYBkQEfCH0BkQAR
AoMBkQAeC4sBIQGUCJEBQQGUCAYAUQHsBZkBUQG1CZ0BqQGUCLMBqQGwB7oBsQH7CfUAsQFcBUwB
UQEvC78BHADJAcUBsQHEAfUA6QDoBs0B6QAzCgYA6QBbAhsALgALAK0CLgATALYCLgAbANUCLgAj
AN4CLgArAAcDLgAzAAcDLgA7AAcDLgBDAN4CLgBLAA0DLgBTAAcDLgBbACQDQABrAG4DQwBjAI8D
yQCbANUC4wCTAI8D6QCbANUCAAFzAI8DAAF7AI8DIQFzAI8DIwFzAI8DQwFzAI8DYwFzAI8DgwFz
AI8D4AR7AI8DLQBEABABogGnAQMAAQAFAAUABwAGAAgACAAAALECjgIAAMMFkgIAAKsCjgIAAL0F
kgIAALgGlgIAAA8InAIAAPsCogIAACsKqAICAAoAAwACAAsABQABAAwABwABAA0ACQACABUACwAC
ABgADQACABkADwABABoADwACABsAEQAMAEwAIQAMAE4AIwBsAK0AswDJAN8AFQEEgAAAAQAAAAAA
AAAAAAAAAABBAQAABAAAAAAAAAAAAAAA0wGcAQAAAAAQAAAAAAAAAAAAAADcAY0KAAAAAAQAAAAA
AAAAAAAAANMBegEAAAAAEAAAAAAAAAAAAAAA3AG3CgAAAAAQAAAAAAAAAAAAAADcAT0HAAAAAAQA
AAAAAAAAAAAAANMB5QUAAAAABAAAAAAAAAAAAAAA0wHPAgAAAAAQAAAAAAAAAAAAAADcAWAHAAAA
AAAAAAABAAAA5QgAAAkAAgAKAAIACwACAAwAAgAtAD8ANQCTADcAqQBHAKkATQCpAAAAAElEVFND
b21wb25lbnRNZXRhRGF0YTEwMABJRFRTUnVudGltZUNvbm5lY3Rpb25Db2xsZWN0aW9uMTAwAElE
VFNSdW50aW1lQ29ubmVjdGlvbjEwMABJRFRTQ29ubmVjdGlvbk1hbmFnZXIxMDAAPD45X181XzAA
PElucHV0MF9Qcm9jZXNzSW5wdXRSb3c+Yl9fNV8wADw+Y19fRGlzcGxheUNsYXNzNl8wADxJc0lu
R2VucmU+Yl9fMAA8Pm5fXzAAPD5jX19EaXNwbGF5Q2xhc3M2XzEAPElzSW5HZW5yZT5iX18xAElF
bnVtZXJhYmxlYDEATGlzdGAxADxJc0luR2VucmU+Yl9fMgBGdW5jYDIAS2V5VmFsdWVQYWlyYDIA
RGljdGlvbmFyeWAyADxQcmVFeGVjdXRlPmRfXzMAU0NfYjAyZjA4NGRiMjhjNGU5MjhkOTMzZTg4
MzUxN2Y3ZTMAPD45ADxNb2R1bGU+AElucHV0SUQAU3lzdGVtLkRhdGEAZ2V0X0NvbXBvbmVudE1l
dGFEYXRhAG1zY29ybGliADw+YwBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBSZWFkAEFkZABT
cWxDb21tYW5kAGRlZmF1bHRJbnN0YW5jZQBFbnVtZXJhYmxlAElEaXNwb3NhYmxlAFJ1bnRpbWVU
eXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAElucHV0TmFtZQBHZXRSdW50aW1lQ29ubmVjdGlv
bkJ5TmFtZQBJQXN5bmNTdGF0ZU1hY2hpbmUAU2V0U3RhdGVNYWNoaW5lAHN0YXRlTWFjaGluZQBN
aWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZQBnZXRfTW92aWVUeXBlAHNldF9Db21tb25N
b3ZpZVR5cGUAVmFsdWVUeXBlAElzSW5HZW5yZQBTeXN0ZW0uQ29yZQBnZXRfQ3VsdHVyZQBzZXRf
Q3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UARGlzcG9zZQBD
cmVhdGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAPD4xX19zdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0
dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUA
RWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXN5bmNTdGF0
ZU1hY2hpbmVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3
b3JrQXR0cmlidXRlAERlYnVnZ2VySGlkZGVuQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlv
bkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhh
dGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0
QXR0cmlidXRlAFNTSVNTY3JpcHRDb21wb25lbnRFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5
Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBQcmVFeGVjdXRl
AFBvc3RFeGVjdXRlAGdldF9WYWx1ZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAEdl
dFN0cmluZwBTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU0NfYjAyZjA4NGRiMjhjNGU5MjhkOTMzZTg4
MzUxN2Y3ZTMuZGxsAGdldF9Nb3ZpZVR5cGVfSXNOdWxsAHNldF9Db21tb25Nb3ZpZVR5cGVfSXNO
dWxsAFNldE51bGwAc2V0X0l0ZW0AU3lzdGVtAFRyaW0AZ2VucmVTeW5vbnltAHJlc291cmNlTWFu
AFNjcmlwdE1haW4ASm9pbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlv
bgBUcmFuc2FjdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBnZXRfUnVudGltZUNvbm5lY3Rpb25Db2xs
ZWN0aW9uAGdldF9Db25uZWN0aW9uAEFjcXVpcmVDb25uZWN0aW9uAFJlbGVhc2VDb25uZWN0aW9u
AFNxbENvbm5lY3Rpb24AY29ubmVjdGlvbgBJbnZhbGlkT3BlcmF0aW9uRXhjZXB0aW9uAFNldEV4
Y2VwdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AU3RyaW5nQ29tcGFyaXNvbgBDdWx0dXJlSW5mbwBP
dXRwdXROYW1lTWFwAE91dHB1dE1hcABNaWNyb3NvZnQuU3FsU2VydmVyLkRUU1J1bnRpbWVXcmFw
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRFRTUGlwZWxpbmVXcmFwAFN5c3RlbS5MaW5xAENoYXIARGJE
YXRhUmVhZGVyAFNxbERhdGFSZWFkZXIARXhlY3V0ZVJlYWRlcgBBc3luY1ZvaWRNZXRob2RCdWls
ZGVyADw+dF9fYnVpbGRlcgBJbnB1dDBCdWZmZXIAUGlwZWxpbmVCdWZmZXIAU2NyaXB0QnVmZmVy
AGdldF9SZXNvdXJjZU1hbmFnZXIAZ2V0X0Nvbm5lY3Rpb25NYW5hZ2VyAE1pY3Jvc29mdC5TcWxT
ZXJ2ZXIuRHRzLlJ1bnRpbWUuV3JhcHBlcgBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGlu
ZS5XcmFwcGVyAEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBT
eXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU0NfYjAyZjA4
NGRiMjhjNGU5MjhkOTMzZTg4MzUxN2Y3ZTMuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2Vz
AERlYnVnZ2luZ01vZGVzAFNDX2IwMmYwODRkYjI4YzRlOTI4ZDkzM2U4ODM1MTdmN2UzLlByb3Bl
cnRpZXMAVmFyaWFibGVzAHR5cGVzAEJ1ZmZlckNvbHVtbkluZGV4ZXMAR2V0Q29sdW1uSW5kZXhl
cwBTZXR0aW5ncwA8PjRfX3RoaXMARXF1YWxzAENvbnRhaW5zAEFjcXVpcmVDb25uZWN0aW9ucwBS
ZWxlYXNlQ29ubmVjdGlvbnMATW92aWVHZW5yZVN5bm9ueW1QYWlycwBnZXRfSGFzUm93cwBPYmpl
Y3QAU2VsZWN0AEVuZE9mUm93c2V0AFNwbGl0AGdldF9EZWZhdWx0AFNldFJlc3VsdABTeXN0ZW0u
RGF0YS5TcWxDbGllbnQAVXNlckNvbXBvbmVudABQYXJlbnRDb21wb25lbnQAU2NyaXB0Q29tcG9u
ZW50AGdldF9DdXJyZW50AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuVHhTY3JpcHQAU3RhcnQAVG9MaXN0
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuUGlwZWxpbmVIb3N0AElucHV0MF9Qcm9jZXNzSW5wdXQATW92
ZU5leHQASW5wdXQwX1Byb2Nlc3NJbnB1dFJvdwBOZXh0Um93AHgAZ2V0X0tleQBnZXRfQXNzZW1i
bHkAQW55AG9wX0luZXF1YWxpdHkAAAAAAAMsAAALTwB0AGgAZQByAACAm0kAcwBOAHUAbABsACAA
cAByAG8AcABlAHIAdAB5ACAAYwBhAG4AbgBvAHQAIABiAGUAIABzAGUAdAAgAHQAbwAgAEYAYQBs
AHMAZQAuACAAQQBzAHMAaQBnAG4AIABhACAAdgBhAGwAdQBlACAAdABvACAAdABoAGUAIABjAG8A
bAB1AG0AbgAgAGkAbgBzAHQAZQBhAGQALgAAD0kAbgBwAHUAdAAgADAAABVDAG8AbgBuAGUAYwB0
AGkAbwBuAABxUwBDAF8AYgAwADIAZgAwADgANABkAGIAMgA4AGMANABlADkAMgA4AGQAOQAzADMA
ZQA4ADgAMwA1ADEANwBmADcAZQAzAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQBy
AGMAZQBzAAA9UwBFAEwARQBDAFQAIAAqACAARgBSAE8ATQAgAGQAYgBvAC4ATQBvAHYAaQBlAEcA
ZQBuAHIAZQBzADsAACvVqWaF0IxMnunHLeayPXEABCABAQgDIAABBSABARERBCABAQ4FIAEBEkkF
IAEBEmkGIAEBEYCZBCABHBwEBwERMAQAABF1BzABAQEQHgAECgERMCAHBBUSQQEOFRJBAQ4VEVEC
DhUSQQEOFRFVAg4VEkEBDgYgAR0OHQMGFRJhAg4OBSACARwYGRACAhUSgLEBHgEVEoCxAR4AFRJh
Ah4AHgEECgIODhAQAQEVEkEBHgAVEoCxAR4AAwoBDgUVEkEBDgoVEj0CDhUSQQEOCiAAFRFRAhMA
EwEKFRFRAg4VEkEBDgogABURVQITABMBChURVQIOFRJBAQ4EIAATAAUgAQETAAMgAAILEAEBAhUS
gLEBHgAKAAIODhUSgLEBDgQHARIoBhUSYQIOAhIQAQICFRKAsQEeABUSYQIeAAIEIAATAQQgAQEc
CiADARJ9HQgSgIEDBhJ9AwYdCAQgAQ4IBCABAggFIAIBCBwHIAICDhGAvQUgAR0ICAUgABKAwQUg
ABKAxQYgARKAyQ4FIAASgIkHAAESSRGAzQUgABKA0QcgAgEOEoDRAyAADgQgAQIOBAcBEiwLBwYI
EggSbQ4OEnEGIAIBDhI5BCAAEm0FAAICDg4HIAIBEwATAQUgAQEScQi3elxWGTTgiQiJhF3NgIDM
kQMGEjkLBhUSPQIOFRJBAQ4DBhIUAwYSGAQGEoCFBAYSgJEEBhKAlQMGEiADBhIkBwYVEmECDg4L
BhURVQIOFRJBAQ4GBhUSQQEOAgYOAgYIAwYRdQMGEggFIAEBEgwSIAICFRJBAQ4VEVUCDhUSQQEO
BCABAQIKIAQBCA4SfRKAgQYgAQESgIUFAAASgJEFAAASgJUGAAEBEoCVBAAAEiADAAABBCABDg4D
KAAOAygAAgUoABKAiQUIABKAkQUIABKAlQQIABIgCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhj
ZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTQ19iMDJmMDg0ZGIyOGM0ZTkyOGQ5MzNlODgzNTE3
ZjdlMwAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDI0AABJAQAaLk5FVEZyYW1ld29yayxWZXJz
aW9uPXY0LjcBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNyABABtT
Y3JpcHRNYWluKzxQcmVFeGVjdXRlPmRfXzMAAAQBAAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0u
UmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0
dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291
cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAALw/AAAAAAAAAAAA
ANY/AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAADIPwAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1z
Y29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQ
AAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhA
AADsAwAAAAAAAAAAAADsAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv
/gAAAQAAAAEAAAAAAAAAAQAAAAAAPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYA
YQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAA
ALAETAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAKAMAAAEAMAAwADAAMAAwADQA
YgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBh
AG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAEMA
XwBiADAAMgBmADAAOAA0AGQAYgAyADgAYwA0AGUAOQAyADgAZAA5ADMAMwBlADgAOAAzADUAMQA3
AGYANwBlADMAAAAwAAgAAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AMAAuADAA
AABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAQwBfAGIAMAAyAGYAMAA4ADQAZABi
ADIAOABjADQAZQA5ADIAOABkADkAMwAzAGUAOAA4ADMANQAxADcAZgA3AGUAMwAuAGQAbABsAAAA
SAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABA
ACAAIAAyADAAMgA0AAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAA
AAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBDAF8AYgAwADIAZgAw
ADgANABkAGIAMgA4AGMANABlADkAMgA4AGQAOQAzADMAZQA4ADgAMwA1ADEANwBmADcAZQAzAC4A
ZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAQwBfAGIAMAAyAGYAMAA4
ADQAZABiADIAOABjADQAZQA5ADIAOABkADkAMwAzAGUAOAA4ADMANQAxADcAZgA3AGUAMwAAADQA
CAABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAuADAAAAA4AAgAAQBB
AHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAA6D8AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_b02f084db28c4e928d933e883517f7e3</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum140"
                  typeConverter="NOTBROWSABLE">EB</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Merge Netflix Shows\MovieType to CommonType.Connections[Connection]"
                  connectionManagerID="Package.ConnectionManagers[localhost.BI_NHF]"
                  connectionManagerRefId="Package.ConnectionManagers[localhost.BI_NHF]"
                  name="Connection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Merge Netflix Shows\MovieType to CommonType.Inputs[Input 0]"
                  hasSideEffects="true"
                  name="Input 0">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Merge Netflix Shows\MovieType to CommonType.Inputs[Input 0].Columns[MovieType]"
                      cachedDataType="wstr"
                      cachedLength="500"
                      cachedName="MovieType"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[MovieType]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Merge Netflix Shows\MovieType to CommonType.Outputs[Output 0]"
                  name="Output 0"
                  synchronousInputId="Package\Merge Netflix Shows\MovieType to CommonType.Inputs[Input 0]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Netflix Shows\MovieType to CommonType.Outputs[Output 0].Columns[CommonMovieType]"
                      dataType="wstr"
                      length="500"
                      lineageId="Package\Merge Netflix Shows\MovieType to CommonType.Outputs[Output 0].Columns[CommonMovieType]"
                      name="CommonMovieType" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Merge Netflix Shows\Netflix Shows"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Consumes data from SQL Server, OLE DB, ODBC, or Oracle, using the corresponding .NET Framework data provider. Use a Transact-SQL statement to define the result set. For example, extract data from SQL Server with the .NET Framework data provider for SQL Server.;Microsoft Corporation; Microsoft SQL Server; © Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
              description="Consumes data from SQL Server, OLE DB, ODBC, or Oracle, using the corresponding .NET Framework data provider. Use a Transact-SQL statement to define the result set. For example, extract data from SQL Server with the .NET Framework data provider for SQL Server."
              name="Netflix Shows"
              usesDispositions="true"
              version="4">
              <properties>
                <property
                  dataType="System.String"
                  description="Specifies the SQL statement used by the component to extract data."
                  expressionType="Notify"
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">30</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether to allow non-string external columns to be implicitly converted to strings at the output columns."
                  name="AllowImplicitStringConversion">true</property>
                <property
                  dataType="System.String"
                  description="The Source database table name."
                  expressionType="Notify"
                  name="TableOrViewName"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">"dbo"."NetflixShows"</property>
                <property
                  dataType="System.Int32"
                  description="Specify the mode to retrieve external column information"
                  name="AccessMode"
                  typeConverter="Microsoft.SqlServer.Dts.Pipeline.DataReaderSourceAdapter+EnumToStringConverter">0</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.DataReaderSourceAdapter</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Merge Netflix Shows\Netflix Shows.Connections[IDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[localhost.BI_NHF]"
                  connectionManagerRefId="Package.ConnectionManagers[localhost.BI_NHF]"
                  description="Managed connection manager"
                  name="IDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output]"
                  name="ADO NET Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Id]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[Id]"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Id]"
                      name="Id"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Type]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[Type]"
                      length="10"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Type]"
                      name="Type"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Title]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[Title]"
                      length="200"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Title]"
                      name="Title"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Director]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[Director]"
                      length="500"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Director]"
                      name="Director"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Cast]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[Cast]"
                      length="1000"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Cast]"
                      name="Cast"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Country]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[Country]"
                      length="250"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Country]"
                      name="Country"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[DateAdded]"
                      dataType="dbDate"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[DateAdded]"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[DateAdded]"
                      name="DateAdded"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[ReleaseYear]"
                      dataType="i2"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[ReleaseYear]"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[ReleaseYear]"
                      name="ReleaseYear"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Rating]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[Rating]"
                      length="100"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Rating]"
                      name="Rating"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Duration]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[Duration]"
                      length="20"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Duration]"
                      name="Duration"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[MovieType]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[MovieType]"
                      length="500"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[MovieType]"
                      name="MovieType"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Description]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[Description]"
                      length="1500"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].Columns[Description]"
                      name="Description"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[Id]"
                      dataType="i4"
                      name="Id" />
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[Type]"
                      dataType="wstr"
                      length="10"
                      name="Type" />
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[Title]"
                      dataType="wstr"
                      length="200"
                      name="Title" />
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[Director]"
                      dataType="wstr"
                      length="500"
                      name="Director" />
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[Cast]"
                      dataType="wstr"
                      length="1000"
                      name="Cast" />
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[Country]"
                      dataType="wstr"
                      length="250"
                      name="Country" />
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[DateAdded]"
                      dataType="dbDate"
                      name="DateAdded" />
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[ReleaseYear]"
                      dataType="i2"
                      name="ReleaseYear" />
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[Rating]"
                      dataType="wstr"
                      length="100"
                      name="Rating" />
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[Duration]"
                      dataType="wstr"
                      length="20"
                      name="Duration" />
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[MovieType]"
                      dataType="wstr"
                      length="500"
                      name="MovieType" />
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output].ExternalColumns[Description]"
                      dataType="wstr"
                      length="1500"
                      name="Description" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output]"
                  isErrorOut="true"
                  name="ADO NET Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[Id]"
                      dataType="i4"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[Id]"
                      name="Id" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[Type]"
                      dataType="wstr"
                      length="10"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[Type]"
                      name="Type" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[Title]"
                      dataType="wstr"
                      length="200"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[Title]"
                      name="Title" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[Director]"
                      dataType="wstr"
                      length="500"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[Director]"
                      name="Director" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[Cast]"
                      dataType="wstr"
                      length="1000"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[Cast]"
                      name="Cast" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[Country]"
                      dataType="wstr"
                      length="250"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[Country]"
                      name="Country" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[DateAdded]"
                      dataType="dbDate"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[DateAdded]"
                      name="DateAdded" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[ReleaseYear]"
                      dataType="i2"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[ReleaseYear]"
                      name="ReleaseYear" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[Rating]"
                      dataType="wstr"
                      length="100"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[Rating]"
                      name="Rating" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[Duration]"
                      dataType="wstr"
                      length="20"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[Duration]"
                      name="Duration" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[MovieType]"
                      dataType="wstr"
                      length="500"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[MovieType]"
                      name="MovieType" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[Description]"
                      dataType="wstr"
                      length="1500"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[Description]"
                      name="Description" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Merge Netflix Shows\OLE DB Command"
              componentClassID="Microsoft.OLEDBCommand"
              contactInfo="OLE DB Command;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;2"
              description="Runs an SQL statement for each row in a data flow. For example, call a 'new employee setup' stored procedure for each row in the 'new employees' table. Note: running an SQL statement for each row of a large data flow may take a long time."
              name="OLE DB Command"
              usesDispositions="true"
              version="2">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  expressionType="Notify"
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">UPDATE [dbo].[Shows]
   SET [AvaileableOn] = ?
 WHERE Id = ?</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1250</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Merge Netflix Shows\OLE DB Command.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[localhost.BI_NHF1]"
                  connectionManagerRefId="Package.ConnectionManagers[localhost.BI_NHF1]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Merge Netflix Shows\OLE DB Command.Inputs[OLE DB Command Input]"
                  errorOrTruncationOperation="Command Execution"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Command Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Merge Netflix Shows\OLE DB Command.Inputs[OLE DB Command Input].Columns[AvaileableOn]"
                      cachedDataType="wstr"
                      cachedLength="100"
                      cachedName="AvaileableOn"
                      externalMetadataColumnId="Package\Merge Netflix Shows\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_0]"
                      lineageId="Package\Merge Netflix Shows\Available on NETFLIX.Outputs[Derived Column Output].Columns[AvaileableOn]" />
                    <inputColumn
                      refId="Package\Merge Netflix Shows\OLE DB Command.Inputs[OLE DB Command Input].Columns[LookupId]"
                      cachedDataType="i4"
                      cachedName="LookupId"
                      externalMetadataColumnId="Package\Merge Netflix Shows\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_1]"
                      lineageId="Package\Merge Netflix Shows\Lookup duplicate movies.Outputs[Lookup Match Output].Columns[LookupId]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_0]"
                      dataType="wstr"
                      length="100"
                      name="Param_0">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                          name="DBParamInfoFlags">65</property>
                      </properties>
                    </externalMetadataColumn>
                    <externalMetadataColumn
                      refId="Package\Merge Netflix Shows\OLE DB Command.Inputs[OLE DB Command Input].ExternalColumns[Param_1]"
                      dataType="i4"
                      name="Param_1">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                          name="DBParamInfoFlags">81</property>
                      </properties>
                    </externalMetadataColumn>
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Merge Netflix Shows\OLE DB Command.Outputs[OLE DB Command Output]"
                  exclusionGroup="1"
                  name="OLE DB Command Output"
                  synchronousInputId="Package\Merge Netflix Shows\OLE DB Command.Inputs[OLE DB Command Input]">
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Merge Netflix Shows\OLE DB Command.Outputs[OLE DB Command Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Command Error Output"
                  synchronousInputId="Package\Merge Netflix Shows\OLE DB Command.Inputs[OLE DB Command Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Merge Netflix Shows\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Merge Netflix Shows\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Merge Netflix Shows\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Merge Netflix Shows\OLE DB Command.Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Merge Netflix Shows.Paths[ADO NET Source Output]"
              endId="Package\Merge Netflix Shows\Available on NETFLIX.Inputs[Derived Column Input]"
              name="ADO NET Source Output"
              startId="Package\Merge Netflix Shows\Netflix Shows.Outputs[ADO NET Source Output]" />
            <path
              refId="Package\Merge Netflix Shows.Paths[Changed]"
              endId="Package\Merge Netflix Shows\OLE DB Command.Inputs[OLE DB Command Input]"
              name="Changed"
              startId="Package\Merge Netflix Shows\AvaileableOn changed.Outputs[Changed]" />
            <path
              refId="Package\Merge Netflix Shows.Paths[Derived Column Output]"
              endId="Package\Merge Netflix Shows\Lookup duplicate movies.Inputs[Lookup Input]"
              name="Derived Column Output"
              startId="Package\Merge Netflix Shows\Available on NETFLIX.Outputs[Derived Column Output]" />
            <path
              refId="Package\Merge Netflix Shows.Paths[Derived Column Output1]"
              endId="Package\Merge Netflix Shows\AvaileableOn changed.Inputs[Conditional Split Input]"
              name="Derived Column Output"
              startId="Package\Merge Netflix Shows\Edit AvaileableOn.Outputs[Derived Column Output]" />
            <path
              refId="Package\Merge Netflix Shows.Paths[Lookup Match Output]"
              endId="Package\Merge Netflix Shows\Edit AvaileableOn.Inputs[Derived Column Input]"
              name="Lookup Match Output"
              startId="Package\Merge Netflix Shows\Lookup duplicate movies.Outputs[Lookup Match Output]" />
            <path
              refId="Package\Merge Netflix Shows.Paths[Lookup No Match Output]"
              endId="Package\Merge Netflix Shows\MovieType to CommonType.Inputs[Input 0]"
              name="Lookup No Match Output"
              startId="Package\Merge Netflix Shows\Lookup duplicate movies.Outputs[Lookup No Match Output]" />
            <path
              refId="Package\Merge Netflix Shows.Paths[Output 0]"
              endId="Package\Merge Netflix Shows\Insert to Shows.Inputs[ADO NET Destination Input]"
              name="Output 0"
              startId="Package\Merge Netflix Shows\MovieType to CommonType.Outputs[Output 0]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{5BA58D21-2205-4D9C-84A2-3EADB3086999}"
      DTS:From="Package\Merge Netflix Shows"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Merge Disney Shows" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="176.8,41.6"
          Id="Package\Merge Disney Shows"
          TopLeft="587.499967900417,171.599998806715" />
        <NodeLayout
          Size="173.6,41.6"
          Id="Package\Merge Netflix Shows"
          TopLeft="282.499984564881,169.866665485435" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="456.099984564881,191.533332146075">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="131.399983335536,0"
              Start="0,0"
              End="123.899983335536,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="123.899983335536,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Merge Disney Shows">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="176.8,41.6"
          Id="Package\Merge Disney Shows\Update AvaileableOn"
          TopLeft="727.833311229117,252.133331909842" />
        <NodeLayout
          Size="208.8,41.6"
          Id="Package\Merge Disney Shows\MovieType to CommonType"
          TopLeft="393.999994128943,381.333333172268" />
        <NodeLayout
          Size="167.2,41.6"
          Id="Package\Merge Disney Shows\OLE DB Command"
          TopLeft="732.999977851908,500.733329879111" />
        <NodeLayout
          Size="183.2,41.6"
          Id="Package\Merge Disney Shows\AvaileableOn changed"
          TopLeft="727.499977834523,372.999997505546" />
        <NodeLayout
          Size="185.6,41.6"
          Id="Package\Merge Disney Shows\Check duplcate movies"
          TopLeft="410.999993875623,251.999996244907" />
        <NodeLayout
          Size="144,41.6"
          Id="Package\Merge Disney Shows\Disney Shows"
          TopLeft="427.999993622303,65.9999990165233" />
        <NodeLayout
          Size="149.6,41.6"
          Id="Package\Merge Disney Shows\Insert to Shows"
          TopLeft="417.499993977447,502.533330430852" />
        <NodeLayout
          Size="184.8,41.6"
          Id="Package\Merge Disney Shows\Availeable On DISNEY"
          TopLeft="405.999993950129,152.999997720123" />
        <EdgeLayout
          Id="Package\Merge Disney Shows.Paths[Output 0]"
          TopLeft="495.349994053195,422.933333172268">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,79.599997258584"
              Start="0,0"
              End="0,72.099997258584">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,72.099997258584" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Merge Disney Shows.Paths[OK]"
          TopLeft="817.849977843216,414.599997505546">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,86.1333323735654"
              Start="0,0"
              End="0,78.6333323735654">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,78.6333323735654" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-19.8755078125,33.4851232180327,39.751015625,11.6630859375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Merge Disney Shows.Paths[Lookup No Match Output]"
          TopLeft="501.099994002283,293.599996244907">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,87.7333369273613"
              Start="0,0"
              End="0,80.2333369273613">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,80.2333369273613" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-55.80638671875,34.3119809636806,111.6127734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Merge Disney Shows.Paths[Lookup Match Output]"
          TopLeft="596.599993875623,272.866664077375">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="131.233317353494,0"
              Start="0,0"
              End="123.733317353494,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="123.733317353494,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="4.806619614247,5,114.120078125,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Merge Disney Shows.Paths[Derived Column Output1]"
          TopLeft="501.099993912876,194.599997720123">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,57.3999985247843"
              Start="0,0"
              End="0,49.8999985247843">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,49.8999985247843" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Merge Disney Shows.Paths[Derived Column Output]"
          TopLeft="817.66664453182,293.733331909842">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,79.2666655957034"
              Start="0,0"
              End="0,71.7666655957034">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,71.7666655957034" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Merge Disney Shows.Paths[ADO NET Source Output]"
          TopLeft="499.199993786216,107.599999016523">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,45.3999987035994"
              Start="0,0"
              End="0,37.8999987035994">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,37.8999987035994" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Merge Disney Shows\Check duplcate movies">
    <Properties>
      <Property>
        <Name>OverwriteParamsSQLProp</Name>
        <Value
          type="q2:string">false</Value>
      </Property>
      <Property>
        <Name>UsedTableName</Name>
        <Value
          type="q3:string">[dbo].[Shows]</Value>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q4:string">0</Value>
      </Property>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Merge Disney Shows\Disney Shows">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Merge Disney Shows\Insert to Shows">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <TaskHost
    design-time-name="Package\Merge Netflix Shows">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="167.2,41.6"
          Id="Package\Merge Netflix Shows\OLE DB Command"
          TopLeft="663.3332970904,417.733330428468" />
        <NodeLayout
          Size="192.8,41.6"
          Id="Package\Merge Netflix Shows\Lookup duplicate movies"
          TopLeft="358.333313754864,200.199998607834" />
        <NodeLayout
          Size="183.2,41.6"
          Id="Package\Merge Netflix Shows\AvaileableOn changed"
          TopLeft="665.833296953805,298.999997920791" />
        <NodeLayout
          Size="141.6,41.6"
          Id="Package\Merge Netflix Shows\Netflix Shows"
          TopLeft="378.333312662112,25.9999998191992" />
        <NodeLayout
          Size="160.8,41.6"
          Id="Package\Merge Netflix Shows\Edit AvaileableOn"
          TopLeft="664.166630378201,207.133331892954" />
        <NodeLayout
          Size="208.8,41.6"
          Id="Package\Merge Netflix Shows\MovieType to CommonType"
          TopLeft="352.49998074025,303.266664707992" />
        <NodeLayout
          Size="180.8,41.6"
          Id="Package\Merge Netflix Shows\Available on NETFLIX"
          TopLeft="358.333313754864,111.799999222557" />
        <NodeLayout
          Size="149.6,41.6"
          Id="Package\Merge Netflix Shows\Insert to Shows"
          TopLeft="375.833312798706,415.999997107188" />
        <EdgeLayout
          Id="Package\Merge Netflix Shows.Paths[Output 0]"
          TopLeft="453.766646769478,344.866664707992">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,71.133332399196"
              Start="0,0"
              End="0,63.633332399196">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,63.633332399196" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Merge Netflix Shows.Paths[Lookup No Match Output]"
          TopLeft="455.816647247557,241.799998607834">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,61.4666661001579"
              Start="0,0"
              End="0,53.9666661001579">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,53.9666661001579" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-55.80638671875,21.178645550079,111.6127734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Merge Netflix Shows.Paths[Lookup Match Output]"
          TopLeft="551.133313754864,224.466665250394">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="113.033316623337,0"
              Start="0,0"
              End="105.533316623337,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="105.533316623337,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="4.5752715929185,5,96.3827734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Merge Netflix Shows.Paths[Derived Column Output1]"
          TopLeft="744.566630378201,248.733331892954">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="12.8666665756042,50.2666660278374"
              Start="0,0"
              End="12.8666665756042,42.7666660278374">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,21.1333330139187" />
                  <mssgle:CubicBezierSegment
                    Point1="0,21.1333330139187"
                    Point2="0,25.1333330139187"
                    Point3="4,25.1333330139187" />
                  <mssgle:LineSegment
                    End="8.8666665756042,25.1333330139187" />
                  <mssgle:CubicBezierSegment
                    Point1="8.8666665756042,25.1333330139187"
                    Point2="12.8666665756042,25.1333330139187"
                    Point3="12.8666665756042,29.1333330139187" />
                  <mssgle:LineSegment
                    End="12.8666665756042,42.7666660278374" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Merge Netflix Shows.Paths[Derived Column Output]"
          TopLeft="451.733313754864,153.399999222557">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,46.7999993852771"
              Start="0,0"
              End="0,39.2999993852771">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,39.2999993852771" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Merge Netflix Shows.Paths[Changed]"
          TopLeft="757.433296953805,340.599997920791">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-10.4999998634056,77.1333325076764"
              Start="0,0"
              End="-10.4999998634056,69.6333325076764">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,34.5666662538382" />
                  <mssgle:CubicBezierSegment
                    Point1="0,34.5666662538382"
                    Point2="0,38.5666662538382"
                    Point3="-4,38.5666662538382" />
                  <mssgle:LineSegment
                    End="-6.49999986340561,38.5666662538382" />
                  <mssgle:CubicBezierSegment
                    Point1="-6.49999986340561,38.5666662538382"
                    Point2="-10.4999998634056,38.5666662538382"
                    Point3="-10.4999998634056,42.5666662538382" />
                  <mssgle:LineSegment
                    End="-10.4999998634056,69.6333325076764" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-25.1255077442028,43.5666662538382,39.751015625,11.6630859375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Merge Netflix Shows.Paths[ADO NET Source Output]"
          TopLeft="448.933313208488,67.5999998191992">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,44.1999994033578"
              Start="0,0"
              End="0,36.6999994033578">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,36.6999994033578" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Merge Netflix Shows\Lookup duplicate movies">
    <Properties>
      <Property>
        <Name>OverwriteParamsSQLProp</Name>
        <Value
          type="q2:string">false</Value>
      </Property>
      <Property>
        <Name>UsedTableName</Name>
        <Value
          type="q3:string">[dbo].[Shows]</Value>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q4:string">0</Value>
      </Property>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Merge Netflix Shows\Netflix Shows">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Merge Netflix Shows\Insert to Shows">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>